[["index.html", "Szövegbányászat és mesterséges intelligencia R-ben 1 Bevezetés", " Szövegbányászat és mesterséges intelligencia R-ben Sebk Miklós, Ring Orsolya 2021-04-14 02:03:12 1 Bevezetés Jelen kötet a Kvantitatív szövegelemzés és szövegbányászat a politikatudományban (LHarmattan, 2016) cím könyv folytatásaként és egyben kiegészítéseként a szövegbányászat és a mesterséges intelligencia társadalomtudományi alkalmazásának gyakorlatába nyújt bevezetést. A szövegek kvantitatív elemzése (quantitative text analysis  QTA) a nemzetközi társadalomtudomány egyik leggyorsabban fejld irányzata. A szövegek és más minségi adatok (filmek, képek) elemzése annyiban különbözik a mennyiségi (kvantitatív) adatokétól, hogy nyers formájukban még nem alkalmasak arra, hogy statisztikai, illetve ökonometriai elemzés alá vessük ket, s így további módszertani problémákat vetnek fel, melyek speciális tárgyalása szükséges. A tervezett kötetben bemutatott példák többsége a politikatudományhoz kapcsolódik, de más alkalmazási területekre is kitér. Míg az elz kötet az egyes kódolási eljárásokat, illetve ezek kutatás-módszertani elnyeit és hátrányait ismertette, itt a társadalomtudományi elemzésének során használható kvantitatív szövegelemzés legfontosabb gyakorlati feladatait vesszük sorra. A kézirat a magyar tankönyvpiacon az elsnek számít a tekintetben, hogy a társadalomtudományban használatos kvantitatív szövegelemzési eljárásokat részletesen, lépésrl-lépésre ismerteti, kezdve a megfelel korpusz kialakításához szükséges ismeretektl, a különböz szövegbányászati módszerek (szózsák, dokumentum-kifejezés mátrix, a névelem-felismerés, az osztályozás, illetve a csoportosítás feladataira), illetve az egyszerbb szövegösszehasonlítási-feladatok áttekintésén át, egészen a felügyelt és felügyelet nélküli gépi tanulásig, a politikatudományi vizsgálatok során leggyakrabban használatos R programnyelven készült programok segítségével. Az olvasó a két kötet együttes használatával olyan ismeretek birtokába kerül, melyek révén képes lesz alkalmazni a kvantitatív szövegelemzés és szövegbányászat legalapvetbb eljárásait saját kutatására. Deduktív vagy induktív felfedez logikája fényében dönthet az adatelemzés módjáról, és a felkínált menübl kiválaszthatja a kutatási tervéhez legjobban illeszked megoldásokat. A kötetet végigkísér konkrét példák segítségével pedig akár reprodukálhatja is ezen eljárásokat saját kutatásában. Mindezt a kötet függelékében helyet kapó R-scriptek részletes leírása is segíti majd. A kötet két f célcsoportjaként így a társadalomtudományi kutatói és felsoktatási közösséget határozzuk meg, valamint rögzítjük, hogy a kvantitatív szövegelemzés területén belül elsdlegesen a dokumentum- és tartalomelemzési módszertanhoz kapcsolódunk. A könyvben ugyancsak helyet kap a fontosabb fogalmak magyar és angol nyelv szószedete, valamint a további olvasásra ajánlott szakirodalom szerepeltetése. Az oktatásban való közvetlen alkalmazást segíthetik továbbá a fejezetek végén megadott vizsgakérdések, illetve a kötet honlapján (qta.tk.mta.hu) szerepl további információk: gyakorlófeladatok (megoldásokkal), az egyes feladatokra alkalmazható scriptek és kereskedelmi programok bemutatása, a témával kapcsolatos prezentációk és további ajánlott irodalmak. "],["a-kvantitatív-szövegelemzés-és-szövegbányászat-alapfogalmai.html", "2 A kvantitatív szövegelemzés és szövegbányászat alapfogalmai", " 2 A kvantitatív szövegelemzés és szövegbányászat alapfogalmai elso fejezet "],["az-adatkezelés-r-ben.html", "3 Az adatkezelés R-ben 3.1 Adatok importálása és exportálása 3.2 Adatok exportálása 3.3 A pipe operátor 3.4 Mveletek a data framekkel 3.5 Munka karakter vektorokkal4", " 3 Az adatkezelés R-ben 3.1 Adatok importálása és exportálása library(readr) library(dplyr) library(gapminder) library(stringr) Az adatok importálására az R alapfüggvénye mellett több package is megoldást kínál. Ezek közül a könyv írásakor a legnépszerbbek a readr és a rio csomagok. A karakter kódolással a legjobban a tapasztalataink szerint a readr csomag read_csv() megoldása birkózik meg, ezért ezt fogjuk használni a .csv állományok beolvasására. Amennyiben kihasználjuk az RStudio projekt opcióját (lásd a Függelékben) akkor elegend csak az elérni kívánt adatok relativ elérési útját megadni (relative path). Ideális esetben az adataink egy csv fájlban vannak (comma separated values), ahol az egyes értékeket vesszk (vagy egyéb speciális karakter) választják el. Ez esetben a read_delim() függvényt használjuk. A beolvasásnál egybl el is tároljuk az adatokat egy objektumban. A sep = opcióval tudjuk a szeparátor karaktert beállítani, mert elfordulhat hogy vessz helyett pontosvessz tagolja az adatainkat. df &lt;- read_csv(&quot;data/adatfile.csv&quot;) Az R képes linkrl letölteni fájlokat, elég megadnunk egy mköd elérési útvonalat. df_online &lt;- read.csv(&quot;https://www.qta.tk.mta.hu/adatok/adatfile.csv&quot;) Az R package ökoszisztémája kellen változatos ahhoz, hogy gyakorlatilag bármilyen inputtal meg tudjon birkózni. Az Excel fájlokat a readxl csomagot használva tudjuk betölteni (a csomagok installálásával kapcsolatban lásd a Függeléket), a read_excel()-t használva. A leggyakoribb statisztikai programok formátumait pedig a haven csomag tudja kezelni (például Stata, Spss, SAS). A szintaxis itt is hasonló: read_stata, read_spss, read_sas. 3.1.1 Szöveges dokumentumok importálása A nagy mennyiség szöveges dokumentum (a legyakrabban elforduló kiterjesztések: .txt, .doc, .pdf, .json, .csv, .xml, .rtf, .odt) betöltésére a legalkalmasabb a readtext package. Az alábbi példa azt mutatja be, hogy hogyan tudunk beolvasni egy adott mappából az összes .txt kiterjesztés file-t, anélkül hogy bármilyen loop-ot kellene írnunk, vagy egyenként megadni a file-ok neveit. A * karakter az azt jelenti ebben a környezetben, hogy bármilyen fájl, ami .txt-re végzdik. Amennyiben a fájlok nevei tartalmaznak valamilyen meta adatot tartalmaznak, akkor ezt be tudjuk állítani a betöltés során. Ilyen meta adat lehet például egy parlamenti felszólalásnál a felszólaló neve és a beszéd ideje és párttagsága (például: kovacsjanos_1994_fkgp.txt). df_text &lt;- readtext( &quot;data/*.txt&quot;, docvarsfrom = &quot;filenames&quot;, dvsep = &quot;_&quot;, docvarnames = c(&quot;nev&quot;, &quot;ev&quot;, &quot;part&quot;) ) 3.2 Adatok exportálása Az adatainkat R-bl a write.csv()-vel exportálhatjuk a kívánt helyre, .csv formátumban. Az R rendelkezik saját, .Rds és .Rda kiterjesztés, tömörített fájlformátummal. Mivel ezeket csak az R-ben nyithatjuk meg, érdemes a köztes, hosszadalmas számítást igényl lépések elmentésére használni, a saveRDS() és a save() parancsokkal. Az openxlsx csomaggal .xls és .xlsx Excel formátumokba is tudunk exportálni, hogyha szükséges. 3.3 A pipe operátor Az úgynevezett pipe operátor alapjaiban határozta meg a modern R fejldését és a népszer package ökoszisztéma, a tidyverse, egyik alapköve. Úgy gondoljuk, hogy a tidyverse és a pipe egyszerbbé teszi elsajátítani az R használatát, ezért mi is erre helyezzük a hangsúlyt.1 Vizuálisan a pipe operátor így néz ki: %&gt;% és arra szolgál hogy a kódban több egymáshoz kapcsolódó mveletet egybefzzünk.2 Technikailag a pipe a bal oldali elemet adja meg a jobb oldali függvény els argumentumának. A lenti példa ugyanazt a folyamatot írja le, az alap R (base R) illetve a pipe használatával.3 Miközben a kódot olvassuk érdemes a pipe-ot és aztán-nak fordítani. reggeli(oltozkodes(felkeles(ebredes(en, idopont = &quot;8:00&quot;), oldal = &quot;jobb&quot;), nadrag = TRUE, ing = TRUE)) en %&gt;% ebredes(idopont = &quot;8:00&quot;) %&gt;% felkeles(oldal = &quot;jobb&quot;) %&gt;% oltozkodes(nadrag = TRUE, ing = TRUE) %&gt;% reggeli() A fenti példa is jól mutatja, hogy a pipe a bal oldali elemet fogja a jobb oldali függvény els elemének berakni. A fejezet további részeiben még bven fogunk gyakorlati példát találni a használatára. A fejezetben bemutatott példák az alkalmazásoknak csak egy relatíve szk körét mutatják be, ezért érdemes átolvasni a csomagokhoz tartozó dokumentációt, illetve ha van, akkor a mködést demonstráló bemutató oldalakat is. 3.4 Mveletek a data framekkel A data frame az egyik leghasznosabb és leggyakrabban használt adat tárolási mód az R-ben (a részletesebb leírás a Függelékben található) és ebben az alfejezetben azt mutatjuk be a dplyr és gapminder csomagok segítségével, hogy hogyan lehet hatékonyan dolgozni velük. A dplyr az egyik legnépszerbb R csomag, a tidyverse része. A gapminder csomag pedig a példa adatbázisunkat tartalmazza, amiben a világ országainak különböz gazdasági és társadalmi mutatói vannak. 3.4.1 Megfigyelések szrése: filter() A sorok (megfigyelések) szréséhez a dplyr csomag filter() parancsát használva lehetségünk van arra hogy egy vagy több kritérium alapján szkítsük az adatbázisunkat. A lenti példában azokat megfigyeléseket tartjuk meg, ahol az év 1962 és a várható élettartam nagyobb mint 72 év. gapminder %&gt;% filter(year == 1962, lifeExp &gt; 72) #&gt; # A tibble: 5 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 Denmark Europe 1962 72.4 4646899 13583. #&gt; 2 Iceland Europe 1962 73.7 182053 10350. #&gt; 3 Netherlands Europe 1962 73.2 11805689 12791. #&gt; 4 Norway Europe 1962 73.5 3638919 13450. #&gt; 5 Sweden Europe 1962 73.4 7561588 12329. De ugyanígy leválogathatjuk a data frame-bl az adatokat akkor is hogyha egy karakter változó alapján szeretnénk szrni. gapminder %&gt;% filter(country == &quot;Sweden&quot;, year &gt; 1990) #&gt; # A tibble: 4 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 Sweden Europe 1992 78.2 8718867 23880. #&gt; 2 Sweden Europe 1997 79.4 8897619 25267. #&gt; 3 Sweden Europe 2002 80.0 8954175 29342. #&gt; 4 Sweden Europe 2007 80.9 9031088 33860. Itt tehát a data frame azon sorait szeretnénk látni, ahol az ország megegyezik a Sweden\" karakterlánccal az év pedig nagyobb, mint 1990. 3.4.2 Változók kiválogatása: select() A select() függvény segítségével válogathatunk oszlopokat a data frame-bl. A változók kiválasztására több megoldás is van. A dplyr csomag tartalmaz apróbb kisegít függvényeket, amik megkönnyítik a nagy adatbázisok esetén a változók kiválogatását a nevük alapján. Ezek a függvények a contains(), starts_with(), ends_with(), matches() és beszédesen arra szolgálnak hogy bizonyos nev változókat ne kelljen egyenként felsorolni. A select()-en belüli változó sorrend egyben az eredmény data frame változó sorrendjét is megadja. A negatív kiválasztás is lehetséges, ebben az esetben egy - kell tennünk a nem kívánt változó(k) elé (pl.: select(df, year, country, -continent). gapminder %&gt;% select(contains(&quot;ea&quot;), starts_with(&quot;co&quot;), pop) #&gt; # A tibble: 1,704 x 4 #&gt; year country continent pop #&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 1952 Afghanistan Asia 8425333 #&gt; 2 1957 Afghanistan Asia 9240934 #&gt; 3 1962 Afghanistan Asia 10267083 #&gt; 4 1967 Afghanistan Asia 11537966 #&gt; 5 1972 Afghanistan Asia 13079460 #&gt; 6 1977 Afghanistan Asia 14880372 #&gt; 7 1982 Afghanistan Asia 12881816 #&gt; 8 1987 Afghanistan Asia 13867957 #&gt; 9 1992 Afghanistan Asia 16317921 #&gt; 10 1997 Afghanistan Asia 22227415 #&gt; # ... with 1,694 more rows 3.4.3 Új változók létrehozása: mutate() Az elemzési munkafolyamat elkerülhetetlen része hogy új változókat hozzunk létre, vagy a meglévket módosítsuk. Ezt a mutate()-el tehetjük meg, ahol a szintaxis a következ: mutate(data frame, uj valtozo = ertekek). Példaként kiszámoljuk a Svéd GDP-t (milliárd dollárban) 1992-tl kezdve. A mutate() alkalmazásával részletesebben is foglalkozunk a szövegek elkészítésével foglalkozó fejezetben. gapminder %&gt;% filter(country == &quot;Sweden&quot;, year &gt;= 1992) %&gt;% mutate(gdp = (gdpPercap * pop) / 10^9) #&gt; # A tibble: 4 x 7 #&gt; country continent year lifeExp pop gdpPercap gdp #&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Sweden Europe 1992 78.2 8718867 23880. 208. #&gt; 2 Sweden Europe 1997 79.4 8897619 25267. 225. #&gt; 3 Sweden Europe 2002 80.0 8954175 29342. 263. #&gt; 4 Sweden Europe 2007 80.9 9031088 33860. 306. 3.4.4 Csoportonkénti statisztikák: group_by() és summarize() Az adataink részletesebb és alaposabb megismerésében segítenek a különböz szint leíró statisztikai adatok. A szintek megadására a group_by() használható, a csoportokon belüli számításokhoz pedig a summarize(). A lenti példa azt illusztrálja, hogyha kontinensenként csoportosítjuk a gapminder data framet, akkor a summarise() használatával megkaphatjuk a megfigyelések számát, illetve az átlagos per capita GDP-t. A summarise() a mutate() közeli rokona, hasonló szintaxissal és logikával használható. Ezt a függvény párost fogjuk majd használni a szöveges adataink leíró statisztikáinál is a 4. fejezetben. gapminder %&gt;% group_by(continent) %&gt;% summarise(megfigyelesek = n(), atlag_gdp = mean(gdpPercap)) #&gt; # A tibble: 5 x 3 #&gt; continent megfigyelesek atlag_gdp #&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 Africa 624 2194. #&gt; 2 Americas 300 7136. #&gt; 3 Asia 396 7902. #&gt; 4 Europe 360 14469. #&gt; 5 Oceania 24 18622. 3.5 Munka karakter vektorokkal4 A szöveges adatokkal (karakter stringekkel) való munka elkerülhetetlen velejárója hogy a felesleges szövegelemeket, karaktereket el kell távolítanunk ahhoz hogy az elemzésünk hatásfoka javuljon (errl részletesebben a 3. fejezetben lesz szó). Erre a célra a stringr csomagot fogjuk használni, kombinálva a korábban bemutatott mutate()-el. A stringr függvények az str_ eltaggal kezddnek és eléggé beszédes nevekkel rendelkeznek. Egy gyakran elforduló probléma, hogy extra szóközök maradnak a szövegben, vagy bizonyos szavakról, karakterkombinációkról tudjuk hogy nem kellenek az elemzésünkhöz. Ebben az esetben egy vagy több regular expression (regex) használatával tudjuk pontosan kijelölni hogy a karakter sornak melyik részét akarjuk módosítani. A legegyszerbb formája a regexeknek, hogyha pontosan tudjuk milyen szöveget akarunk megtalálni. A kísérletezésre az str_view()-t használjuk, ami megjeleníti hogy a megadott regex mintánk pontosan mit jelöl. szoveg &lt;- c(&quot;gitar&quot;, &quot;ukulele&quot;, &quot;nagybogo&quot;) str_view(szoveg, pattern = &quot;ar&quot;) Az anchor-okkal azt lehet megadni, hogy a karakter string elején vagy végén szeretnénk egyezést találni. A string eleji anchor a ^, a string végi pedig a $. str_view(&quot;Dr. Doktor Dr.&quot;, pattern = &quot;^Dr.&quot;) str_view(&quot;Dr. Doktor Dr.&quot;, pattern = &quot;Dr.$&quot;) Egy másik jellemz probléma, hogy olyan speciális karaktert akarunk leírni a regex kifejezésünkkel, ami amúgy a regex szintaxisban használt. Ilyen eset például a ., ami mint írásjel sokszor csak zaj, ám a regex kontextusban a bármilyen karakter megfelelje. str_view(&quot;Dr. Doktor Dr.&quot;, pattern = &quot;.k.&quot;) Ahhoz hogy magát az írásjelet jelöljük, a \\\\ -t kell elé rakni. str_view(&quot;Dr. Doktor Dr.&quot;, pattern = &quot;\\\\.&quot;) Néhány hasznos regex kifejezés: [:digit:] - számok (123) [:alpha:] - betk (abc ABC) [:lower:] - kisbetk (abc) [:upper:] - nagybetk (ABC) [:alnum:] - betk és számok (123 abc ABC) [:punct:] - központozás (.!?\\(){}) [:graph:] - betk, számok és központozás (123 abc ABC .!?\\(){}) [:space:] - szóköz ( ) [:blank:] - szóköz és tabulálás [:cntrl:] - kontrol karakterek (\\n, \\r, stb.) * - bármi A tidyverse megközelítés miatt a kötetben szerepl R kód követi a The tidyverse style guide dokumentációt (https://style.tidyverse.org/) Az RStudio-ban a pipe operátor billenty kombinációja a Ctrl + Shift + M Köszönjük Andrew Heissnek a kitn példát. A könyv terjedelme miatt ezt a témát itt csak bemutatni tudjuk, de minden részletre kiterjeden nem tudunk elmélyülni benne. Kiváló online anyagok találhatóak az RStudio GitHub tárhelyén (https://github.com/rstudio/cheatsheets/raw/master/strings.pdf), illetve Wickham and Grolemund (2016) 14. fejezetében. "],["korpuszépítés-és-szövegel-készítés.html", "4 Korpuszépítés és szövegelkészítés 4.1 Szövegbeszerzés 4.2 Szövegelkészítés", " 4 Korpuszépítés és szövegelkészítés 4.1 Szövegbeszerzés A szövegbányászati elemzések egyik els lépése az elemzés alapjául szolgáló korpusz megépítése. A korpuszt alkotó szövegek beszerzésének egyik módja a webscarping, melynek során weboldalakról történik az információ kinyerése. A scrapelést végezhetjük R-ben az rvest csomag segítségével. Fejezetünkben a scrapelésnek csupán néhány alaplépését mutatjuk meg, a folyamatról bvebb információ található például az alábbi oldalakon: https://cran.r-project.org/web/packages/rvest/rvest.pdf, https://rvest.tidyverse.org. library(rvest) library(readr) library(dplyr) library(lubridate) library(stringr) library(quanteda) library(quanteda.textmodels) Majd a read_html() függvény segítségével az adott weboldal adatait kérjük le a szerverrl. A read_html() függvény argumentuma az adott weblap URL-je. Ha például a poltextLAB projekt honlapjáról szeretnénk adatokat gyjteni, azt az alábbi módon tehetjük meg: r &lt;- read_html(&quot;https://poltextlab.tk.hu/hu&quot;) r #&gt; {html_document} #&gt; &lt;html lang=&quot;hu&quot; class=&quot;no-js&quot;&gt; #&gt; [1] &lt;head&gt;\\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charse ... #&gt; [2] &lt;body class=&quot;index&quot;&gt;\\n\\n\\t&lt;script&gt;\\n\\t (function(i,s,o,g,r,a,m){i ... Ezután a html_nodes() függvény argumentumaként meg kell adnunk azt a HTML címkét vagy CSS azonosítót, ami a legyjteni kívánt elemeket azonosítja a weboldalon. Ezeket az azonosítókat az adott weboldal forráskódjának megtekintésével tudhatjuk meg, amire a különböz böngészk különböz lehetségeket kínálnak. Majd a html_text() függvény segítségével megkapjuk azokat a szövegeket, amely az adott weblapon az adott azonosítóval rendelkeznek. Példánkban a https://poltextlab.tk.hu/hu weboldalról azokat az információkat szeretnénk kigyjteni, amelyek az &lt;title&gt; címke alatt szerepenek: title &lt;- read_html(&quot;https://poltextlab.tk.hu/hu&quot;) %&gt;% html_nodes(&quot;title&quot;) %&gt;% html_text() title #&gt; [1] &quot;MTA TK Political and Legal Text Mining and Artificial Intelligence Laboratory (poltextLAB)&quot; A kigyjtött információkat pedig ezután kiíratjuk egy csv fájlba. write_csv(title, &quot;title.csv&quot;) A web scraping során az egyik nehézség, ha a weboldal letiltja az automatikus letöltést, ezt kivédhetjük például különböz böngészbvítmények segítségével, illetve a fejléc (header) vagy a user agent megváltoztatásával, de segíthet véletlenszer proxy vagy VPN szolgáltatás használata is, valamint ha az egyes kérések között idt hagynunk. A weboldalakon legtöbbször a legyjtött szövegekhez tartozó különböz metaadatok is szerepelnek (például egy parlamenti beszéd dátuma, az azt elmondó képvisel neve), melyeket érdemes a scarpelés során szintén összegyjteni. A scrapelés során fontos figyelnünk arra, hogy késbb jól használható formában mentsük el az adatokat, például .csv,.json vagy .txt kiterjesztésekkel. A karakterkódolási problémák elkerülése érdekében érdemes UTF-8 vagy UTF-16-os kódolást alkalmazni, mivel ezek tartalmazzák a magyar nyelv ékezetes karaktereit is. A karakterkódolással kapcsolatosan hasznos további információk találhatóak az alábbi oldalon: http://www.cs.bme.hu/~egmont/utf8 Arra is van lehetség, hogy az elemezni kívánt korpuszt papíron keletkezett, majd szkennelt és szükség szerint optikai karakterfelismerés (OCR, Optical Character Recognition) segítségével feldolgozott szövegekbl építsük fel. Azonban mivel ezeket a feladatokat nem R-ben végezzük, ezekrl itt nem szólunk bvebben. Az így beszerzett és .txt, vagy .csv fájllá alakított szövegekbl való korpuszépítés a következ lépésekben megegyezik a weboldalakról gyjtött szövegekével. 4.2 Szövegelkészítés Az elemzéshez vezet következ lépés a szövegelkészítés, amit a szöveg tisztításával kell kezdenünk. A szövegtisztításnál mindig járjunk el körültekinten és az egyes lépéseket a kutatási kérdésünknek megfelelen tervezzük meg, a folyamat során pedig idnként végezzünk ellenrzést, ezzel elkerülhetjük a kutatásunkhoz szükséges információk elvesztését. Miután az elemezni kívánt szövegeinket beszereztük, majd a Szöveges dokumentumok importálása[BE KELL MAJD ÍRNI A VÉLGLEGES FEJEZETSZÁMOT] cím alfejezetben leírtak szerint importáltuk, következhetnek az alapvet elfeldolgozási lépések, ezek közé tartozik például a scrapelés során a kopuszba került html címkék, számok és egyéb zajok (például a speciális karakterek, írásjelek) eltávolítása a korpuszból, valamint a kisbetsítés, a tokenizálás, a szótövezés és a stopszavazás. 4.2.1 String mveletek A stringr csomag segítségével elször eltávolíthatjuk a felesleges html címkéket a korpuszból. Ehhez elször létrehozzuk a text1 nev objektumot ami egy karaktervektorból áll. text1 &lt;- c(&quot;MTA TK&quot;, &quot;&lt;font size=&#39;6&#39;&gt; Political and Legal Text Mining and Artificial Intelligence Laboratory (poltextLAB)&quot;) text1 #&gt; [1] &quot;MTA TK&quot; #&gt; [2] &quot;&lt;font size=&#39;6&#39;&gt; Political and Legal Text Mining and Artificial Intelligence Laboratory (poltextLAB)&quot; Majd a str_replace_all()függvény segítségével eltávolítjuk két html címke közötti szövegrészt. Ehhez a függvény argumentumában létrehozunk egy regex kifejezést, aminek segítségével a függvény minden &lt;&gt; közötti szövegrészt üres karakterekre cserél. Ezután a str_to_lower()mindent kisbetvé konvertál, majd a str_trim()eltávolítja a szóközöket a karakterláncok elejérl és végérl. text1 %&gt;% str_replace_all(pattern = &quot;&lt;.*?&gt;&quot;, replacement = &quot;&quot;) %&gt;% str_to_lower() %&gt;% str_trim() #&gt; [1] &quot;mta tk&quot; #&gt; [2] &quot;political and legal text mining and artificial intelligence laboratory (poltextlab)&quot; 4.2.2 Tokenizálás, szótövezés, kisbetsítés és a stopszavak eltávolítása Az elkészítés következ lépésében tokenizáljuk, azaz egységeire bontjuk az elemezni kívánt szöveget, a tokenek így pedig az egyes szavakat vagy kifejezéseket fogják jelölni. Ennek eredményeként kapjuk meg az n-gramokat, amik a vizsgált egységek (számok, betk, szavak, kifejezések) n-elem sorozatát alkotják. A következkben a Példa az elkészítésre mondatot bontjuk elször tokenekre a tokens() függvénnyel, majd a tokeneket a tokens_tolower() segítségével kisbetsítjük, a tokens_wordstem() függvénnyel pedig szótövezzük. Végezetül a quanteda csomagban található magyar nyelv stopszótár segítségével, elvégezzük a stopszavak eltávolítását.Ehhez elször létrehozzuk az sw elnevezés karaktervektort a magyar stopszvakból. A head() függvény segítségével belenézhetünk a szótárba, és a console-ra kiírathatjuk a szótár els hat szavát. Végül a tokens_remove()segítségével eltávolítjuk a stopszavakat. text &lt;- &quot;Példa az elokészítésre&quot; toks &lt;- tokens(text) toks &lt;- tokens_tolower(toks) toks &lt;- tokens_wordstem(toks) toks #&gt; Tokens consisting of 1 document. #&gt; text1 : #&gt; [1] &quot;példa&quot; &quot;az&quot; &quot;elokészítésr&quot; sw &lt;- stopwords(&quot;hungarian&quot;) head(sw) #&gt; [1] &quot;a&quot; &quot;ahogy&quot; &quot;ahol&quot; &quot;aki&quot; &quot;akik&quot; &quot;akkor&quot; tokens_remove(toks, sw) #&gt; Tokens consisting of 1 document. #&gt; text1 : #&gt; [1] &quot;példa&quot; &quot;elokészítésr&quot; 4.2.2.1 Stemmelés vagy lemmatizálás Ezt követi a szótövezés lépése, melynek során az alkalmazott stemmel algoritmus egyszeren levágja a szavak összes toldalékát, a képzket, jelzket és ragokat. A stemmelés helyett alkalmazhatunk lemmatizálást, melynek során a szavakat a szótári alakjukra formáljuk. A stemming és lemmatizálás közötti különbség abban rejlik, hogy a szótövezés során csupán eltávolítjuk a szavak toldalékként azonosított végzdéseit, hogy ugyanannak a szónak különböz megjelenési formáit közös törzsre redukáljuk, míg a lemmatizálás esetében rögtön az értelmes, szótári formát kapjuk vissza. A két módszer közötti választás a kutatási kérdés alapján meghozott kutatói döntésen alapul (Grimmer and Stewart 2013). 4.2.2.1.1 Lemmatizálás Az alábbi példában egyetlen szó különböz alakjainak szótári alakra hozásával szemléltetjük a lemmatizáslás mködését. Ehhez elször a text1 nev objektumban tároljuk a lemmatizálni kívánt szöveget, majd tokenizáljuk és eltávolítjuk a központozást. Ezután definiáljuk azt a megfelel szótövet és azt, hogy mely szavak alakjait szeretnénk erre a szótre egységesíteni majd a rep() függvény segítségével elvégezzük a lemmatizálást, amely a korábban definiált szólakokat az általunk megadott szótári alakkal helyettesíti. Hosszabb szövegek lemmatizálásához elre létrehozott szótárakat használhatunk, ilyen például a Wordnet, ami magyar nyelven is elérhet: https://github.com/mmihaltz/huwn A magyar nyelv szövegek lemmatizálását elvégezhetjük a szövegek R-be való beolvasása eltt is a magyarláncnyelvi elemz segítségével, melyrl a kötet függelékében, a Magyar nyelv NLP és nyelvtechnológiai eszközök között szólunk részletesebben. text1 &lt;- &quot;Példa az elokészítésre. Az elokészítést a szövetisztítással kell megkezdenünk. Az elokészített korpuszon elemzést végzünk&quot; toks1 &lt;- tokens(text1, remove_punct = TRUE) elokeszites &lt;- c(&quot;elokészítésre&quot;, &quot;elokészítést&quot;, &quot;elokészített&quot;) lemma &lt;- rep(&quot;elokészítés&quot;, length(elokeszites)) toks1 &lt;- tokens_replace(toks1, elokeszites, lemma, valuetype = &quot;fixed&quot;) toks1 #&gt; Tokens consisting of 1 document. #&gt; text1 : #&gt; [1] &quot;Példa&quot; &quot;az&quot; &quot;elokészítés&quot; #&gt; [4] &quot;Az&quot; &quot;elokészítés&quot; &quot;a&quot; #&gt; [7] &quot;szövetisztítással&quot; &quot;kell&quot; &quot;megkezdenünk&quot; #&gt; [10] &quot;Az&quot; &quot;elokészítés&quot; &quot;korpuszon&quot; #&gt; [ ... and 2 more ] 4.2.2.1.2 Stemmelés A fenti text1 objektumban tárolt szöveg stemmelését az alábbiak szerint tudjuk elvégezni. Megvizsgálva az elkészítés különböz alakjainak lemmatizált és stemmelt változatát jól láthatjuk a két módszer közötti különbséget. text1 &lt;- &quot;Példa az elokészítésre. Az elokészítést a szövetisztítással kell megkezdenünk. Az elokészített korpuszon elemzést végzünk&quot; toks2 &lt;- tokens(text1, remove_punct = TRUE) toks2 &lt;- tokens_wordstem(toks2) toks2 #&gt; Tokens consisting of 1 document. #&gt; text1 : #&gt; [1] &quot;Példa&quot; &quot;az&quot; &quot;elokészítésr&quot; #&gt; [4] &quot;Az&quot; &quot;elokészítést&quot; &quot;a&quot; #&gt; [7] &quot;szövetisztításs&quot; &quot;kell&quot; &quot;megkezdenünk&quot; #&gt; [10] &quot;Az&quot; &quot;elokészített&quot; &quot;korpuszon&quot; #&gt; [ ... and 2 more ] 4.2.3 Dokumentum kifejezés mátrix (DTM) A szövegbányászati elemzések nagy részéhez szükségünk van arra, hogy a szövegeinkbl dokumentum kifejezés matrix-ot (DTM), vagy dokumentum feature matrxi-ot (DFM) hozzunk létre. Ezzel a lépéssel alakítjuk a szövegeinket számokká, ami lehetvé teszi, hogy utána különböz statisztikai mveleteket végezzünk velük. A dokumentum kifejezés mátrix minden sora egy dokumentum, minden oszlopa egy kifejezés, az oszlopokban szerepl változók pedig az egyes kifejezések számát mutatják meg az egyes dokumentumokban. A legtöbb DTM ritka mátrix, mivel a legtöbb dokumentum és kifejezés párosítása nem történik meg, mivel a kifejezések nagy része csak néhány dokumentumban szerepel, ezek értéke nulla lesz. Az alábbi példában három egy-egy mondatos dokumentumon szemléltetjük a fentieket. A korábban megismert módon elkészítjük, azaz kisbetsítjük, stemmeljük és stopszavazzuk a dokumentumokat, majd létrehozzuk bellük a dokumentum kifejezés mátrixot. text &lt;- c( d1 = &quot;Ez egy példa az elfeldolgozásra&quot;, d2 = &quot;Egy másik lehetséges példa&quot;, d3 = &quot;Ez pedig egy harmadik példa&quot; ) dtm &lt;- dfm( text, tolower = TRUE, stem = TRUE, remove = stopwords(&quot;hungarian&quot;) ) dtm #&gt; Document-feature matrix of: 3 documents, 4 features (50.0% sparse). #&gt; features #&gt; docs példa elofeldolgozásra lehetség harmadik #&gt; d1 1 1 0 0 #&gt; d2 1 0 1 0 #&gt; d3 1 0 0 1 Egy másik szövegbányászati megközelítés a mátrixot nem DTM-nek, hanem DFM-nek nevezi, például a quanteda csomag használata során nem DTM-et, hanem DFM-et kell létrehoznunk. text &lt;- c( d1 = &quot;Ez egy példa az elofeldolgozásra&quot;, d2 = &quot;Egy másik lehetséges példa&quot;, d3 = &quot;Ez pedig egy harmadik példa&quot; ) dfm &lt;- dfm( text, tolower = TRUE, stem = TRUE, remove = stopwords(&quot;hungarian&quot;) ) dfm #&gt; Document-feature matrix of: 3 documents, 4 features (50.0% sparse). #&gt; features #&gt; docs példa elofeldolgozásra lehetség harmadik #&gt; d1 1 1 0 0 #&gt; d2 1 0 1 0 #&gt; d3 1 0 0 1 4.2.4 Súlyozás A dokumentum kifejezés mátrix lehet egy egyszer bináris mátrix, ami csak azt az információt tartalmazza, hogy egy adott szó elfordul-e egy adott dokumentumban. Míg az egyszer bináris mátrixban ugyanakkora súlya van egy szónak ha egyszer és ha tízszer szerepel, készíthetünk olyan mátrixot is, ahol egy szónak annál nagyobb a súlya egy dokumentumban, minél többször fordul el. A szógyakoriság (term frequency, TM) szerint súlyozott TD mátrixnál azt is figyelembe vesszük, hogy az adott szó hány dokumentumban szerepel. Minél több dokumentumban szerepel egy szó, annál kisebb a jelentsége. Ilyen szavak például a névelk, amelyek sok dokumentumban elfordulnak ugyan, de nem sok tartalmi jelentséggel bírnak. Két szó közül általában az a fontosabb, amelyik koncentráltan, kevés dokumentumban, de azokon belül nagy gyakorisággal fordul el. A dokumentum gyakorisági érték (document frequency, df) egy szó ritkaságát jellemzi egy korpuszon belül, azaz megadja, hogy mekkora megkülönböztet ereje van egy szónak a dokumentum tartalmára vonatkozóan. A súlyozási sémákban általában a dokumentum gyakorisági érték inverzével számolnak (inverse document frequency, idf) ez a leggyakrabban használt td-idf súlyozás (term frequency &amp; inverse document frequency. Az így súlyozott TD mátrix egy-egy cellájában található érték azt mutatja, hogy egy adott szónak mekkora a jelentsége egy adott dokumentumban. A tf -idf súlyozás értéke tehát magas azon szavak esetén, amelyek az adott dokumentumban gyakran fordulnak el, míg a teljes korpuszban ritkán, alacsonyabb azon szavak esetén, amelyek az adott dokumentumban ritkábban, vagy a korpuszban gyakrabban fordulnak el és kicsi azon szavaknál, amelyek a korpusz lényegében összes dokumentumában elfordulnak (Tikk 2007, 3337 o.) Az alábbiakban az 1999-es törvényszövegeken szemléltetjük hogy egy 125 dokumentumból létrehozott mátrix segítségével milyen alapvet statisztikai mveleteket végezhetünk.5 Ehhez elször importáljuk a törvények egy .csv kiterjesztés fájlból. A read_csv() használatának az az elnye, hogy alapbeállításként UTF-8 formátumban importálja be a szöveges oszlopokat. lawtext_df &lt;- read_csv(&quot;data/lawtext_1999.csv&quot;) Majd az importált fájlokból létrehozzuk a korpusz lawtext_corpus néven. Ezt követi a dokumentum kifejezés mátrix kialakítása (mivel a quanteda csomaggal dolgozunk, dfm mátrixot hozunk létre), és ezzel egy lépésben, elvégezzük az alapvet szövegtisztitó lépéseket is. lawtext_corpus &lt;- corpus(lawtext_df) lawtext_dfm &lt;- dfm( lawtext_corpus, tolower = TRUE, remove = stopwords(&quot;hungarian&quot;), stem = TRUE, remove_punct = TRUE, remove_symbols = TRUE, remove_numbers = TRUE ) A topfeatures függvény segítségével megnézhetjük a mátrix leggyakoribb szavait a függvény argumentumában a dokumentum kifejezés mátrix nevét és a kívánt kifejezésszámot megadva. topfeatures(lawtext_dfm, 15) #&gt; the of szerzodo to b ha and #&gt; 7902 5665 3619 3290 2831 2794 2712 #&gt; kiadások törvéni in következo muködési or évi #&gt; 2447 2385 2253 2178 2038 2034 1908 #&gt; is #&gt; 1864 Mivel látható, hogy a szövegekben sok angol kifejezés is volt egy következ lépcsben, az angol stopszavakat is eltávolítjuk. lawtext_dfm_2 &lt;- dfm(lawtext_dfm, remove = stopwords(&quot;english&quot;)) Majd ismét megnézzük a leggyakoribb 15 kifejezést. topfeatures(lawtext_dfm_2, 15) #&gt; szerzodo b ha kiadások törvéni #&gt; 3619 2831 2794 2447 2385 #&gt; következo muködési évi állam c #&gt; 2178 2038 1908 1718 1713 #&gt; meghatározott költségveté államban lép fél #&gt; 1654 1637 1622 1616 1533 Ezután tf-idf súlyozású statisztikát készítünk, a dokumentum kifejezés mátrix alapján. Ehhez elször létrehozzuk a lawtext_tfidf nev objektumot, majd a textstat_frequency függvény segítségével, és kilistázzuk annak els 10 elemét. lawtext_tfidf &lt;- dfm_tfidf(lawtext_dfm_2) textstat_frequency(lawtext_tfidf, force = TRUE, n = 10) #&gt; feature frequency rank docfreq group #&gt; 1 kiadások 2120.2303 1 17 all #&gt; 2 felhalmozási 1448.3465 2 7 all #&gt; 3 szerzodo 1378.5012 3 52 all #&gt; 4 költségveté 1302.8556 4 20 all #&gt; 5 shall 1291.1619 5 14 all #&gt; 6 államban 1223.7785 6 22 all #&gt; 7 részes 1155.9688 7 13 all #&gt; 8 muködési 1101.7581 8 36 all #&gt; 9 articl 967.8961 9 14 all #&gt; 10 parti 845.2246 10 20 all Az itt használt kódok az alábbiakon alapulnak: https://rdrr.io/cran/quanteda/man/dfm_weight.html, https://rdrr.io/cran/quanteda/man/dfm_tfidf.html "],["információ-visszakeresés-és-információkinyerés-szövegek-reprezentálása-a-vektortérben-leíró-statisztika.html", "5 Információ-visszakeresés és információkinyerés, szövegek reprezentálása a vektortérben, leíró statisztika 5.1 A szövegek reprezentálása a vektortérben - szózsák modell 5.2 Leíró statisztika 5.3 A szövegek lexikai diverzitása 5.4 Összehasonlítás9 5.5 Kifejezések kontextusba helyezése", " 5 Információ-visszakeresés és információkinyerés, szövegek reprezentálása a vektortérben, leíró statisztika A szövegbányászati feladatok két altípusa a keresés és a rendszerezés. A keresés során olyan szövegeket keresünk, amelyekben egy adott kifejezés elfordul, a rendszerezés során pedig a szövegeket hasonlítjuk össze egymással és egy elre megadott, vagy egy elzetesen nem ismert kategóriarendszer csoportjaihoz soroljuk ket. Az információ-visszakeresés (information retrieval), ami például a webes keresprogramok egyik jellemz tevékenysége, során a cél, hogy a korpuszból visszakeressük a keres információigénye szempontjából releváns információkat, mely keresés alapulhat metaadatokon vagy teljes szöveges indexelésen (Tikk 2007; Russel and Norvig 2005, 742.o). Az információkinyerés (information extraction) esetén a cél, hogy a strukturálatlan szövegekbl strukturált adatokat állítsunk el. Azaz az információkinyerés során nem a felhasználó által keresett információt keressük meg és lokalizáljuk, hanem az adott kérdés szempontjából releváns információkat gyjtjük ki a dokumentumokból. aAz információkinyerés alternatív megoldása segítségével már képesek lehetünk a kifejezések közötti kapcsolatok elemzésére, tendenciák és minták felismerésére és az információk összekapcsolás révén új információk létrehozására. Azaz a segítségével strukturálatlan szövegekbl is elállíthatunk strukturált információkat (Kwartler 2017; Schütze, Manning, and Raghavan 2008; Tikk 2007, 6381.o). 5.1 A szövegek reprezentálása a vektortérben - szózsák modell A szövegbányászati vizsgálatok során folyó szövegek, azaz strukturálatlan vagy részben strukturált dokumentumok elemzésére kerül sor, melyekbl a kutatási kérdéseink szempontjából releváns, látens összefüggéseket nyerünk ki, amelyek már strukturált szerkezetek. A dokumentumok reprezentálásnak három legelterjedtebb módja a halmazelmélet alapú, az algebrai és a valószínségi modell. A halmazelméleti modellek a dokumentumok hasonlóságát halmazelmélet, a valószínségi modellek pedig feltételes valószínségi becslés alapján határozzák meg. Az algebrai modellek a dokumentumokat vektorként vagy mátrixként ábrázolják és algebrai mveletek segítségével hasonlítják össze. A vektortérmodell sokdimenziós vektortérben ábrázolja a dokumentumokat, úgy hogy a dokumentumokat vektorokkal reprezentálja, a vektortér dimenziói pedig a dokumentumok összességében elforduló egyedi szavak. A modell alkalmazása során azok a dokumentumok hasonlítanak egymásra, amelyeknek a szókészlete átfedi egymást, és a hasonlóság mértéke az átfedéssel arányos. A vektortérmodellben a dokumentumgyjteményt a szó-dokumentum mátrixszal (term-document matrix) reprezentáljuk, a mátrixban a sorok száma megegyezik az egyedi szavak számával, az oszlopokat pedig a dokumentumvektorok alkotják. Az egyedi szavak összességét szórátnak nevezzük. Mivel mátrixban az egyedi szavak száma általában igen nagy, ezért a mátrix hatékony kezeléséhez annak mérete különböz eljárásokkal csökkenthet. Fontos tudni, hogy a dokumentumok vektortér reprezentációjában a szavak szövegen belüli sorrendjére és pozíciójára vonatkozó információ nem található meg (Russel and Norvig 2005, 74244 o.; Kwartler 2017; Welbers, Van Atteveldt, and Benoit 2017). A vektortérmodellt szózsák (bag of words) modellnek is nevezzük, melynek segítségével a fent leírtak szerint az egyes szavak gyakoriságát vizsgálhatjuk meg egy adott korpuszon belül. A szó-dokumentum mátrix lehet egy egyszer bináris mátrix, ami csak azt az információt tartalmazza, hogy egy adott szó elfordul-e egy adott dokumentumban. Míg az egyszer bináris mátrixban ugyanakkora súlya van egy szónak ha egyszer és ha tízszer szerepel, készíthetünk olyan mátrixot is, ahol egy szónak annál nagyobb a súlya egy dokumentumban, minél többször fordul el. Emellett a mátrixot a dokumentumok hossza szerint is normálhatjuk. Az így súlyozott mátrixban nem azt vizsgáljuk, hogy egy szó hányszor egy dokumentumban, hanem ezt a számot viszonyítjuk az adott dokumentum szavainak a számához. A szógyakoriság (term frequency, TM) szerint súlyozott TD mátrixnál azt is figyelembe vesszük, hogy az adott szó hány dokumentumban szerepel. Minél több dokumentumban szerepel egy szó, annál kisebb a jelentsége. Ilyen szavak például a névelk, amelyek sok dokumentumban elfordulnak ugyan, de nem sok tartalmi jelentséggel bírnak. Két szó közül általában az a fontosabb, amelyik koncentráltan, kevés dokumentumban, de azokon belül nagy gyakorisággal fordul el. A dokumentum gyakorisági érték (document frequency, df) egy szó ritkaságát jellemzi egy korpuszon belül, azaz megadja, hogy mekkora megkülönböztet ereje van egy szónak a dokumentum tartalmára vonatkozóan. A súlyozási sémákban általában a dokumentum gyakorisági érték inverzével számolnak (inverse document frequency, idf) ez a leggyakrabban használt td-idf súlyozás (term frequency &amp; inverse document frequency. Az így súlyozott TD mátrix egy-egy cellájában található érték azt mutatja, hogy egy adott szónak mekkora a jelentsége egy adott dokumentumban. A tf -idf súlyozás értéke tehát magas azon szavak esetén, amelyek az adott dokumentumban gyakran fordulnak el, míg a teljes korpuszban ritkán, alacsonyabb azon szavak esetén, amelyek az adott dokumentumban ritkábban, vagy a korpuszban gyakrabban fordulnak el és kicsi azon szavaknál, amelyek a korpusz lényegében összes dokumentumában elfordulnak (Tikk 2007, 3337 o.; Grimmer and Stewart 2013; Welbers, Van Atteveldt, and Benoit 2017) 5.2 Leíró statisztika Fejezetünkben nyolc véletlenszeren kiválasztott magyar miniszterelnöki beszéd vizsgálatát végezzük el, amihez az alábbi csomagokat használjuk: library(readtext) library(dplyr) library(lubridate) library(stringr) library(ggplot2) library(quanteda) library(GGally) library(tidytext) library(tidyverse) Els lépésben a már ismertetett módon a readtext () segítségével beolvassuk a beszédek txt formátumú változatát, utf-8 karakterkódolással. texts &lt;- readtext(&quot;data/mineln/*.txt&quot;, encoding = &quot;UTF-8&quot;) head(texts) #&gt; readtext object consisting of 6 documents and 0 docvars. #&gt; # Description: df[,2] [6 x 2] #&gt; doc_id text #&gt; * &lt;chr&gt; &lt;chr&gt; #&gt; 1 antall_jozsef_1990.txt &quot;\\&quot;Elnök Úr! \\&quot;...&quot; #&gt; 2 bajnai_gordon_2009.txt &quot;\\&quot;Tisztelt E\\&quot;...&quot; #&gt; 3 boross_peter_1993.txt &quot;\\&quot;Elnök Úr! \\&quot;...&quot; #&gt; 4 gyurcsany_ferenc_2005.txt &quot;\\&quot;Mélyen tis\\&quot;...&quot; #&gt; 5 horn_gyula_1994.txt &quot;\\&quot;Köszönöm, \\&quot;...&quot; #&gt; 6 medgyessy_peter_2002.txt &quot;\\&quot;Mélyen tis\\&quot;...&quot; Ezt követen az Adatkezelés R-ben fejezetben ismertetett mutate() függvény használatával két csoportra osztjuk a beszédeket. Ehhez elször a string_extract()segítségével meghatározzuk, hogy a kettéosztáshoz használni kívánt új változó a doc_id legyen a [^\\\\.]* regex segítségével leválasztva arról a .txt kiterjesztést, majd a str_sub() függvénnyel megmondjuk, hogy a miniszterelnökök neve a doc_id hátulról számított hatodik karakteréig tart. Ezután kialakítjuk a két csoportot, azaz az if_else() segítségével meghatározzuk, hogy ha antall_jozsef, boross_peter, orban_viktor beszédeirl van szó azokat a jobb csoportba tegye, a maradékot pedig a bal csoportba. Ezt követen azt is meghatározzuk, hogy melyik beszédnek mi a dátuma. Ehhez szintén a str_sub() függvényt használjuk, majd a lubridate segítségével alakítjuk ki a kívánt dátumformátumot6. Majd a glimpse() függvény segítségével megtekintjük, hogy milyen változtatásokat végeztünk az adattáblánkon. Láthatjuk, hogy míg korábban 8 dokumentumunk és 2 változónk volt, az átalakítás eredményeként a 8 dokumentum mellett már 5 változót találunk. Ezzel a lépéssel tehát kialakítottuk azokat a változókat, amelyekre az elemzés során szükségünk lesz. texts &lt;- texts %&gt;% mutate(doc_id = str_extract(doc_id, &quot;[^\\\\.]*&quot;), mineln = str_sub(doc_id, end = -6), wing = if_else(mineln %in% c(&quot;antall_jozsef&quot;, &quot;boross_peter&quot;, &quot;orban_viktor&quot;), &quot;jobb&quot;, &quot;bal&quot;)) texts$year &lt;- str_sub(texts$doc_id, start = -2) %&gt;% str_c(&quot;-01-01&quot;) %&gt;% lubridate::ymd() %&gt;% lubridate::year() glimpse(texts) #&gt; Rows: 8 #&gt; Columns: 5 #&gt; $ doc_id &lt;chr&gt; &quot;antall_jozsef_1990&quot;, &quot;bajnai_gordon_2009&quot;, &quot;boross_p... #&gt; $ text &lt;chr&gt; &quot;Elnök Úr! Tisztelt Országgyulés! Hölgyeim és Uraim! ... #&gt; $ mineln &lt;chr&gt; &quot;antall_jozsef&quot;, &quot;bajnai_gordon&quot;, &quot;boross_peter&quot;, &quot;gy... #&gt; $ wing &lt;chr&gt; &quot;jobb&quot;, &quot;bal&quot;, &quot;jobb&quot;, &quot;bal&quot;, &quot;bal&quot;, &quot;bal&quot;, &quot;jobb&quot;, &quot;... #&gt; $ year &lt;dbl&gt; 1990, 2009, 1993, 2005, 1994, 2002, 1995, 2018 Ezt követen a további lépések elvégzéséhez létrehozzuk a quanteda korpuszt, majd a summary() függvény segítségével megtekinthetjük a korpusz alapvet statisztikai jellemzit, láthatjuk például, hogy az egyes dokumentumok hány tokenbl vagy mondatból állnak. corpus_mineln &lt;- corpus(texts) summary(corpus_mineln) #&gt; Corpus consisting of 8 documents, showing 8 documents: #&gt; #&gt; Text Types Tokens Sentences mineln wing year #&gt; antall_jozsef_1990 3745 9408 431 antall_jozsef jobb 1990 #&gt; bajnai_gordon_2009 1391 3277 201 bajnai_gordon bal 2009 #&gt; boross_peter_1993 1552 3170 179 boross_peter jobb 1993 #&gt; gyurcsany_ferenc_2005 2963 10267 454 gyurcsany_ferenc bal 2005 #&gt; horn_gyula_1994 1704 4372 226 horn_gyula bal 1994 #&gt; medgyessy_peter_2002 1021 2362 82 medgyessy_peter bal 2002 #&gt; orban_viktor_1995 1810 4287 212 orban_viktor jobb 1995 #&gt; orban_viktor_2018 933 1976 126 orban_viktor jobb 2018 Mivel az elemzés során a korpuszon belül két csoportra osztva szeretnénk összehasonlításokat tenni, az alábbiakban két alkorpuszt alakítunk ki. mineln_jobb &lt;- corpus_subset(corpus_mineln, mineln %in% c(&quot;antall_jozsef&quot;, &quot;boross_peter&quot;, &quot;orban_viktor&quot;)) mineln_bal &lt;- corpus_subset(corpus_mineln, mineln %in% c(&quot;horn_gyula&quot;, &quot;gyurcsany_ferenc&quot;, &quot;medgyessy_peter&quot;, &quot;bajnai_gordon&quot;)) summary(mineln_jobb) #&gt; Corpus consisting of 4 documents, showing 4 documents: #&gt; #&gt; Text Types Tokens Sentences mineln wing year #&gt; antall_jozsef_1990 3745 9408 431 antall_jozsef jobb 1990 #&gt; boross_peter_1993 1552 3170 179 boross_peter jobb 1993 #&gt; orban_viktor_1995 1810 4287 212 orban_viktor jobb 1995 #&gt; orban_viktor_2018 933 1976 126 orban_viktor jobb 2018 summary(mineln_bal) #&gt; Corpus consisting of 4 documents, showing 4 documents: #&gt; #&gt; Text Types Tokens Sentences mineln wing year #&gt; bajnai_gordon_2009 1391 3277 201 bajnai_gordon bal 2009 #&gt; gyurcsany_ferenc_2005 2963 10267 454 gyurcsany_ferenc bal 2005 #&gt; horn_gyula_1994 1704 4372 226 horn_gyula bal 1994 #&gt; medgyessy_peter_2002 1021 2362 82 medgyessy_peter bal 2002 A korábban létrehozott jobb és bal változó segítségével nem csak az egyes dokumentumokat, hanem a két csoportba sorolt beszédeket is összehasonlíthatjuk egymással. summary(corpus_mineln) %&gt;% group_by(wing) %&gt;% summarise(mean_wordcount = mean(Tokens), std_dev = sd(Tokens), min_wordc = min(Tokens), max_wordc = max(Tokens)) #&gt; # A tibble: 2 x 5 #&gt; wing mean_wordcount std_dev min_wordc max_wordc #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 bal 5070. 3561. 2362 10267 #&gt; 2 jobb 4710. 3271. 1976 9408 A textstat_collocations() függvény segítségével együtt elforduló szókapcsolatokat kereshetünk. A függvény argumentumai közül a size a szókapcsolatok hossza, a min_count pedig a minimális elfordulásuk száma. Miután a szókapcsolatokat megkeressük a korábban már megismert head() függvény segítségével megnézhetünk közülük tetszleges számút7. corpus_mineln %&gt;% textstat_collocations( size = 3, min_count = 6 ) %&gt;% head(n = 10) #&gt; collocation count count_nested length lambda z #&gt; 1 a kormány a 30 0 3 1.7266498 3.5500939 #&gt; 2 az új kormány 13 0 3 4.7126130 2.9870558 #&gt; 3 az a politika 6 0 3 3.9239765 2.4659912 #&gt; 4 a kormány az 6 0 3 2.6826277 1.7954739 #&gt; 5 a száz lépés 9 0 3 3.5817972 1.5956086 #&gt; 6 a magyar gazdaság 14 0 3 2.5135668 1.5757358 #&gt; 7 ez a program 9 0 3 1.9371894 1.2837433 #&gt; 8 tisztelt hölgyeim és 31 0 3 2.2327116 0.9596371 #&gt; 9 hogy ez a 10 0 3 0.4617372 0.9032165 #&gt; 10 hogy a magyar 18 0 3 0.6903168 0.7832561 A szókapcsolatok listázásánál is láthattuk, hogy a korpuszunk még minden szót tartalmaz, ezért találtunk például hogy ez a összetételt. A következkben eltávolítjuk az ilyen funkció nélküli stopszavakat a korpuszból, amihez saját stopszólistát használunk. Elször beolvassuk és egy custom_stopwords nev objektumban tároljuk a stopszavakat, majd a tokens() függvény segítségével tokenizáljuk a korpuszt és a tokens_select() használatával eltávolítjuk a stopszavakat. Ha ezután újra megnézzük a kollokációkat, jól látható a stopszavak eltávolításának eredménye: custom_stopwords &lt;- readLines(&quot;data/stopwords.txt&quot;, encoding = &quot;UTF-8&quot;) corpus_mineln %&gt;% tokens() %&gt;% tokens_select(pattern = custom_stopwords, selection = &quot;remove&quot;) %&gt;% textstat_collocations( size = 3, min_count = 6 ) %&gt;% head(n = 10) #&gt; collocation count count_nested length lambda z #&gt; 1 taps MSZP soraiból 7 0 3 -1.848559 -1.003837 #&gt; 2 tisztelt hölgyeim uraim 31 0 3 -3.217896 -1.087495 #&gt; 3 taps kormánypártok soraiban 13 0 3 -1.884367 -1.102199 #&gt; 4 közbeszólás fidesz soraiból 12 0 3 -4.371498 -1.949939 #&gt; 5 taps MSZP soraiban 9 0 3 -4.711439 -2.780059 A korpuszon további elemzése eltt fontos, hogy ne csak a stopszavakat távolítsuk el, hanem az egyéb alapvet szövegtisztító lépéseket is elvégezzük. Azaz a tokens_select() segítségével eltávolítsuk a számokat, a központozást, az elválasztó karaktereket, mint például a szóközöket, tabulátorokat, sortöréseket. Ezután a tokens_ngrams() segítségével ngramokat hozunk létre a tokenekbl, majd kialakítjuk a dokumentum kifejezés mátrixot (dfm) és elvégezzük a tf-idf szerinti súlyozást. A dfm_tfidf()függvény kiszámolja a dokumentum gyakoriság inverz súlyozását. A függvény alapértelmezés szerint a normalizált kifejezések gyakoriságát használja a dokumentumon belüli relatív kifejezés gyakoriság helyett, ezt írjuk felül a schem__tf = \"prop\" használatával. Végül a textstat_frequency() segítségével gyakorisági statisztikát készíthetünk a korábban meghatározott (példánkban két és három tagú) ngramokról. corpus_mineln %&gt;% tokens( remove_numbers = TRUE, remove_punct = TRUE, remove_separators = TRUE ) %&gt;% tokens_select(pattern = custom_stopwords, selection = &quot;remove&quot;) %&gt;% tokens_ngrams(n = 2:3) %&gt;% dfm() %&gt;% dfm_tfidf(scheme_tf = &quot;prop&quot;) %&gt;% textstat_frequency(n = 10, force = TRUE) #&gt; feature frequency rank docfreq group #&gt; 1 tisztelt_hölgyeim 0.002788904 1 4 all #&gt; 2 tisztelt_hölgyeim_uraim 0.002788904 1 4 all #&gt; 3 fordítsanak_hátat 0.002439685 3 1 all #&gt; 4 fidesz_soraiból 0.002151922 4 1 all #&gt; 5 taps_mszp 0.001757918 5 2 all #&gt; 6 magyarország_európa 0.001457380 6 1 all #&gt; 7 tisztelt_képviselotársaim 0.001439932 7 2 all #&gt; 8 kormánypártok_soraiban 0.001430247 8 2 all #&gt; 9 taps_kormánypártok 0.001293617 9 2 all #&gt; 10 taps_kormánypártok_soraiban 0.001293617 9 2 all 5.3 A szövegek lexikai diverzitása Az alábbiakban a korpuszunkat alkotó szövegek lexikai diverzitását vizsgáljuk. Ehhez a quanteda csomag textstat_lexdiv()függvényét használjuk. Mivel ez a függvény dfm-et elemez, elször a corpus_mineln nev korpuszunkból létrehozzuk a mineln_dfm nev dfm-et, amelyen elvégezzük a korábban már megismert alapvet tisztító lépéseket. A textstat_lexdiv() függvény eredménye szintén egy dfm, így azt arrange()parancs argumentumában a desc megadásával csökken sorba is rendezhetjük. Atextstat_lexdiv() különböz indexek segítségével számítja ki a szövegek lexikai különbözséget, példánkban a CTTR indexet használjuk8. mineln_dfm &lt;- corpus_mineln %&gt;% tokens(remove_punct = TRUE, remove_separators = TRUE, remove_hyphens = TRUE) %&gt;% dfm(remove = custom_stopwords) mineln_dfm %&gt;% textstat_lexdiv(measure = &quot;CTTR&quot;) %&gt;% arrange(desc(CTTR)) #&gt; document CTTR #&gt; 1 antall_jozsef_1990 32.99078 #&gt; 2 gyurcsany_ferenc_2005 26.14422 #&gt; 3 orban_viktor_1995 23.35548 #&gt; 4 horn_gyula_1994 22.25547 #&gt; 5 boross_peter_1993 21.98656 #&gt; 6 bajnai_gordon_2009 19.93214 #&gt; 7 medgyessy_peter_2002 16.81246 #&gt; 8 orban_viktor_2018 16.24532 A kiszámolt értéket hozzáadhatjuk a dfm-hez is. dfm_lexdiv &lt;- mineln_dfm cttr_score &lt;- unlist(textstat_lexdiv(dfm_lexdiv, measure = &quot;CTTR&quot;)[, 2]) docvars(dfm_lexdiv, &quot;cttr&quot;) &lt;- cttr_score docvars(dfm_lexdiv) #&gt; mineln wing year cttr #&gt; 1 antall_jozsef jobb 1990 32.99078 #&gt; 2 bajnai_gordon bal 2009 19.93214 #&gt; 3 boross_peter jobb 1993 21.98656 #&gt; 4 gyurcsany_ferenc bal 2005 26.14422 #&gt; 5 horn_gyula bal 1994 22.25547 #&gt; 6 medgyessy_peter bal 2002 16.81246 #&gt; 7 orban_viktor jobb 1995 23.35548 #&gt; 8 orban_viktor jobb 2018 16.24532 A fenti elemzést elvégezhetjük úgy is, hogy valamennyi indexálást egyben megkapjuk. Ehhez a textstat_lexdiv() függvény argumentumába a measure = \"all\" kifejezést kell megadnunk. mineln_dfm %&gt;% textstat_lexdiv(measure = &quot;all&quot;) #&gt; document TTR C R CTTR U #&gt; 1 antall_jozsef_1990 0.6465054 0.9490329 46.65601 32.99078 72.92298 #&gt; 2 bajnai_gordon_2009 0.7283044 0.9566410 28.18830 19.93214 73.23764 #&gt; 3 boross_peter_1993 0.7209677 0.9565427 31.09369 21.98656 75.23509 #&gt; 4 gyurcsany_ferenc_2005 0.5563859 0.9301449 36.97351 26.14422 52.17985 #&gt; 5 horn_gyula_1994 0.7142122 0.9555469 31.47399 22.25547 73.97126 #&gt; 6 medgyessy_peter_2002 0.7110912 0.9514261 23.77641 16.81246 62.75886 #&gt; 7 orban_viktor_1995 0.7224880 0.9574810 33.02964 23.35548 78.08616 #&gt; 8 orban_viktor_2018 0.7529538 0.9584932 22.97435 16.24532 71.52920 #&gt; S K I D Vm Maas lgV0 #&gt; 1 0.9601534 11.21473 419.0858 0.0009296389 0.02871363 0.1171029 11.191310 #&gt; 2 0.9616371 16.40817 459.3906 0.0009739104 0.02691146 0.1168511 10.429595 #&gt; 3 0.9624951 18.51659 355.0407 0.0013147316 0.03325578 0.1152895 10.725349 #&gt; 4 0.9440104 11.86397 291.9314 0.0009601654 0.02791768 0.1384359 9.233313 #&gt; 5 0.9618001 12.60022 571.6996 0.0007454724 0.02321726 0.1162702 10.656921 #&gt; 6 0.9553276 26.48161 251.3022 0.0017552766 0.03728672 0.1262300 9.420533 #&gt; 7 0.9637924 16.50145 400.1580 0.0011722374 0.03143078 0.1131652 11.019123 #&gt; 8 0.9610435 26.17792 313.3935 0.0015453380 0.03451461 0.1182383 9.980932 #&gt; lgeV0 #&gt; 1 25.76894 #&gt; 2 24.01503 #&gt; 3 24.69603 #&gt; 4 21.26049 #&gt; 5 24.53847 #&gt; 6 21.69158 #&gt; 7 25.37247 #&gt; 8 22.98195 Ha pedig arra vagyunk kíváncsiak, hogy a kapott értékek hogyan viszonyulnak egymáshoz, azt a cor() függvény segítésével számolhatjuk ki. div_df &lt;- mineln_dfm %&gt;% textstat_lexdiv(measure = &quot;all&quot;) cor(div_df[, 2:13]) #&gt; TTR C R CTTR U #&gt; TTR 1.0000000 0.9709934 -0.64927227 -0.64927227 0.75866675 #&gt; C 0.9709934 1.0000000 -0.44988787 -0.44988787 0.88841537 #&gt; R -0.6492723 -0.4498879 1.00000000 1.00000000 -0.02424963 #&gt; CTTR -0.6492723 -0.4498879 1.00000000 1.00000000 -0.02424963 #&gt; U 0.7586668 0.8884154 -0.02424963 -0.02424963 1.00000000 #&gt; S 0.8514841 0.9516268 -0.16264543 -0.16264543 0.98430655 #&gt; K 0.5991452 0.4294223 -0.83367217 -0.83367217 0.01275208 #&gt; I 0.2327750 0.3698611 0.26241321 0.26241321 0.58486310 #&gt; D 0.4013304 0.2514823 -0.65214634 -0.65214634 -0.10697212 #&gt; Vm 0.3075452 0.1968097 -0.47355632 -0.47355632 -0.07691131 #&gt; Maas -0.7882881 -0.9112332 0.05759202 0.05759202 -0.99701921 #&gt; lgV0 0.3571139 0.5682834 0.45841359 0.45841359 0.87598404 #&gt; S K I D Vm #&gt; TTR 0.85148414 0.59914525 0.2327750 0.40133039 0.30754517 #&gt; C 0.95162677 0.42942231 0.3698611 0.25148227 0.19680971 #&gt; R -0.16264543 -0.83367217 0.2624132 -0.65214634 -0.47355632 #&gt; CTTR -0.16264543 -0.83367217 0.2624132 -0.65214634 -0.47355632 #&gt; U 0.98430655 0.01275208 0.5848631 -0.10697212 -0.07691131 #&gt; S 1.00000000 0.16142157 0.5274070 0.01957486 0.01930842 #&gt; K 0.16142157 1.00000000 -0.5873634 0.94208077 0.84481216 #&gt; I 0.52740696 -0.58736335 1.0000000 -0.77504336 -0.82248673 #&gt; D 0.01957486 0.94208077 -0.7750434 1.00000000 0.96943443 #&gt; Vm 0.01930842 0.84481216 -0.8224867 0.96943443 1.00000000 #&gt; Maas -0.99354677 -0.06058855 -0.5695876 0.06563582 0.04532617 #&gt; lgV0 0.79330142 -0.40821917 0.6634351 -0.42692805 -0.31562199 #&gt; Maas lgV0 #&gt; TTR -0.78828811 0.3571139 #&gt; C -0.91123321 0.5682834 #&gt; R 0.05759202 0.4584136 #&gt; CTTR 0.05759202 0.4584136 #&gt; U -0.99701921 0.8759840 #&gt; S -0.99354677 0.7933014 #&gt; K -0.06058855 -0.4082192 #&gt; I -0.56958764 0.6634351 #&gt; D 0.06563582 -0.4269281 #&gt; Vm 0.04532617 -0.3156220 #&gt; Maas 1.00000000 -0.8557245 #&gt; lgV0 -0.85572445 1.0000000 A kapott értékeket a ggcorr() függvény segítségével ábrázolhatjuk is. Ha a függvény argumentumában a label = TRUE szerepel, a kapott ábrán a kiszámított értékek is szerepelnek. ggcorr(div_df[, 2:13], label = TRUE) Ezt követen azt is megvizsgálhatjuk, hogy a korpusz szövegei mennyire könnyen olvashatóak. Ehhez a Flesch.Kincaid pontszámot használjuk, ami a szavak és mondatok hossza alapján határozza meg a szöveg olvashatóságát. Ehhez textstat_readability() függvényt használjuk, mely a korpuszunkat elemzi. corpus_mineln %&gt;% textstat_readability(measure = &quot;Flesch.Kincaid&quot;) #&gt; document Flesch.Kincaid #&gt; 1 antall_jozsef_1990 16.48512 #&gt; 2 bajnai_gordon_2009 10.92243 #&gt; 3 boross_peter_1993 15.40159 #&gt; 4 gyurcsany_ferenc_2005 13.55911 #&gt; 5 horn_gyula_1994 13.77918 #&gt; 6 medgyessy_peter_2002 15.81893 #&gt; 7 orban_viktor_1995 13.04284 #&gt; 8 orban_viktor_2018 11.39180 Ezután a kiszámított értékkel kiegészítjük a korpuszt. docvars(corpus_mineln, &quot;f_k&quot;) &lt;- textstat_readability(corpus_mineln, measure = &quot;Flesch.Kincaid&quot;)[, 2] docvars(corpus_mineln) #&gt; mineln wing year f_k #&gt; 1 antall_jozsef jobb 1990 16.48512 #&gt; 2 bajnai_gordon bal 2009 10.92243 #&gt; 3 boross_peter jobb 1993 15.40159 #&gt; 4 gyurcsany_ferenc bal 2005 13.55911 #&gt; 5 horn_gyula bal 1994 13.77918 #&gt; 6 medgyessy_peter bal 2002 15.81893 #&gt; 7 orban_viktor jobb 1995 13.04284 #&gt; 8 orban_viktor jobb 2018 11.39180 docvars(corpus_mineln, &quot;f_k&quot;) &lt;- textstat_readability(corpus_mineln, measure = &quot;Flesch.Kincaid&quot;)[, 2] docvars(corpus_mineln) #&gt; mineln wing year f_k #&gt; 1 antall_jozsef jobb 1990 16.48512 #&gt; 2 bajnai_gordon bal 2009 10.92243 #&gt; 3 boross_peter jobb 1993 15.40159 #&gt; 4 gyurcsany_ferenc bal 2005 13.55911 #&gt; 5 horn_gyula bal 1994 13.77918 #&gt; 6 medgyessy_peter bal 2002 15.81893 #&gt; 7 orban_viktor jobb 1995 13.04284 #&gt; 8 orban_viktor jobb 2018 11.39180 Majd a ggplot2 segítségével vizualizálhatjuk az eredményt. Ehhez az olvashatósági pontszámmal kiegészített korpuszból data fram-et alakítunk ki, majd beállítjuk az ábrázolás paramétereit. Azaz, hogy a két tengelyen az év illetve az olvashatósági pontszám szerepeljen, a színezés különböztesse meg a jobb és a bal oldalt, az egyes dokumentumokat ponttal jelöljük, a jobb és bal oldali beszédeket vonallal kötjük össze, az ábrára fekete színnel felíratjuk a miniszterelnökök nevét, valamint, hogy az x tengely beosztása az egyes beszédek dátumához igazodjon. A theme_minimal() függvénnyel pedig azt határozzuk meg, hogy mindez fehér hátteret kapjon. corpus_df &lt;- docvars(corpus_mineln) ggplot(corpus_df, aes(year, f_k, color = wing)) + geom_point(size = 2) + geom_line(aes(linetype = wing), size = 1) + geom_text(aes(label = mineln), color = &quot;black&quot;, nudge_y = 0.15) + scale_x_continuous(breaks = corpus_df$year) + theme_minimal() Figure 5.1: Az olvashatósági index alakulása 5.4 Összehasonlítás9 A fentiekben láthattuk az eltéréseket a jobb és bal oldali beszédeken belül, st ugyanahhoz a miniszterelnökhöz tartozó két beszéd között is. A következkben textstat_dist() és textstat_simil() függvények segítségével megvizsgáljuk, valójában mennyire hasonlítanak vagy különböznek ezek a beszédek. Mindkét függvény bemenete dmf, melybl elször egy súlyozott dfm-et készítünk, majd elvégezzük az összehasonlítást elször a jaccard-féle hasonlóság alapján. mineln_dfm %&gt;% dfm_weight(&quot;prop&quot;) %&gt;% textstat_simil(margin = &quot;documents&quot;, method = &quot;jaccard&quot;) #&gt; textstat_simil object; method = &quot;jaccard&quot; #&gt; antall_jozsef_1990 bajnai_gordon_2009 boross_peter_1993 #&gt; antall_jozsef_1990 1.0000 0.0559 0.1011 #&gt; bajnai_gordon_2009 0.0559 1.0000 0.0564 #&gt; boross_peter_1993 0.1011 0.0564 1.0000 #&gt; gyurcsany_ferenc_2005 0.0798 0.0850 0.0604 #&gt; horn_gyula_1994 0.0694 0.0592 0.0613 #&gt; medgyessy_peter_2002 0.0404 0.0690 0.0473 #&gt; orban_viktor_1995 0.0778 0.0626 0.0631 #&gt; orban_viktor_2018 0.0362 0.0617 0.0401 #&gt; gyurcsany_ferenc_2005 horn_gyula_1994 #&gt; antall_jozsef_1990 0.0798 0.0694 #&gt; bajnai_gordon_2009 0.0850 0.0592 #&gt; boross_peter_1993 0.0604 0.0613 #&gt; gyurcsany_ferenc_2005 1.0000 0.0683 #&gt; horn_gyula_1994 0.0683 1.0000 #&gt; medgyessy_peter_2002 0.0684 0.0587 #&gt; orban_viktor_1995 0.0734 0.0621 #&gt; orban_viktor_2018 0.0503 0.0494 #&gt; medgyessy_peter_2002 orban_viktor_1995 orban_viktor_2018 #&gt; antall_jozsef_1990 0.0404 0.0778 0.0362 #&gt; bajnai_gordon_2009 0.0690 0.0626 0.0617 #&gt; boross_peter_1993 0.0473 0.0631 0.0401 #&gt; gyurcsany_ferenc_2005 0.0684 0.0734 0.0503 #&gt; horn_gyula_1994 0.0587 0.0621 0.0494 #&gt; medgyessy_peter_2002 1.0000 0.0650 0.0504 #&gt; orban_viktor_1995 0.0650 1.0000 0.0583 #&gt; orban_viktor_2018 0.0504 0.0583 1.0000 Majd a textstat_dist() függvény segítségével kiszámoljuk a dokumentumok egymástól való különbözségét. mineln_dfm %&gt;% textstat_dist(margin = &quot;documents&quot;, method = &quot;euclidean&quot;) #&gt; textstat_dist object; method = &quot;euclidean&quot; #&gt; antall_jozsef_1990 bajnai_gordon_2009 boross_peter_1993 #&gt; antall_jozsef_1990 0 162.8 134.1 #&gt; bajnai_gordon_2009 163 0 84.6 #&gt; boross_peter_1993 134 84.6 0 #&gt; gyurcsany_ferenc_2005 186 137.8 149.7 #&gt; horn_gyula_1994 164 80.1 88.0 #&gt; medgyessy_peter_2002 160 68.1 81.8 #&gt; orban_viktor_1995 139 84.7 79.7 #&gt; orban_viktor_2018 167 67.3 85.4 #&gt; gyurcsany_ferenc_2005 horn_gyula_1994 #&gt; antall_jozsef_1990 186 163.6 #&gt; bajnai_gordon_2009 138 80.1 #&gt; boross_peter_1993 150 88.0 #&gt; gyurcsany_ferenc_2005 0 147.0 #&gt; horn_gyula_1994 147 0 #&gt; medgyessy_peter_2002 143 75.9 #&gt; orban_viktor_1995 147 89.6 #&gt; orban_viktor_2018 148 74.8 #&gt; medgyessy_peter_2002 orban_viktor_1995 orban_viktor_2018 #&gt; antall_jozsef_1990 160.2 139.2 167.4 #&gt; bajnai_gordon_2009 68.1 84.7 67.3 #&gt; boross_peter_1993 81.8 79.7 85.4 #&gt; gyurcsany_ferenc_2005 142.6 146.9 147.9 #&gt; horn_gyula_1994 75.9 89.6 74.8 #&gt; medgyessy_peter_2002 0 77.5 60.7 #&gt; orban_viktor_1995 77.5 0 83.6 #&gt; orban_viktor_2018 60.7 83.6 0 Ezután vizualizálhatjuk is a dokumentumok egymástól való távolságát egy olyan dendogram segítségével, amely megmutatja nekünk a lehetséges dokumentumpárokat. dist &lt;- mineln_dfm %&gt;% textstat_dist(margin = &quot;documents&quot;, method = &quot;euclidean&quot;) plot(hclust(as.dist(dist))) Figure 5.2: A dokumentumok csoportosítása a távolságuk alapján mineln_dfm %&gt;% textstat_simil(y = mineln_dfm[, c(&quot;kormány&quot;)], margin = &quot;features&quot;, method = &quot;correlation&quot;) %&gt;% head(n = 10) #&gt; kormány #&gt; elnök -0.1185449 #&gt; tisztelt -0.5401371 #&gt; országgyulés 0.8082763 #&gt; hölgyeim -0.3580776 #&gt; uraim -0.3580776 #&gt; honfitársaim 0.8648335 #&gt; ünnepi 0.8737759 #&gt; pillanatban 0.8737759 #&gt; állok 0.6864778 #&gt; magyar 0.7530170 Arra is van lehetségünk, hogy a két alkorpuszt hasonlítsuk össze egymással. Ehhez a textstat_keyness() függvényt használjuk, melynek a bemenete a dfm. A függvény argumentumában a target = után kell megadni, hogy mely alkorpusz a viszonyítási alap. Az összehasonlítás eredményét a textplot_keyness()` függvény segítségével ábrázolhatjuk, ami megjeleníti a két alkorpusz leggyakoribb kifejezéseit. dfm &lt;- dfm( corpus_mineln, groups = &quot;wing&quot;, remove = custom_stopwords, remove_punct = TRUE ) result_keyness &lt;- textstat_keyness(dfm, target = &quot;jobb&quot;) textplot_keyness(result_keyness) Figure 5.3: A korpuszok legfontosabb kifejezései Ha az egyes miniszterelnökök beszédeinek leggyakoribb kifejezéseit szeretnénk összehasonlítani, azt a textstat_frequency() függvény segítségével tehetjük meg, melynek bemenete a megtisztított és súlyozott dfm. Az összehasonlítás eredményét pedig a ggplot2 segítségével ábrázolhatjuk is. dfm_weight &lt;- corpus_mineln %&gt;% dfm( remove = custom_stopwords, tolower = TRUE, remove_punct = TRUE, stem = TRUE, remove_symbols = TRUE, remove_numbers = TRUE ) %&gt;% dfm_weight(scheme = &quot;prop&quot;) freq_weight &lt;- textstat_frequency(dfm_weight, n = 5, groups = &quot;mineln&quot;) ggplot(data = freq_weight, aes(x = nrow(freq_weight):1, y = frequency)) + geom_point() + facet_wrap(~ group, scales = &quot;free&quot;) + coord_flip() + scale_x_continuous( breaks = nrow(freq_weight):1, labels = freq_weight$feature ) + labs( x = NULL, y = &quot;Relative frequency&quot; ) Figure 5.4: Leggyakoribb kifejezések a miniszterelnöki beszédekben 5.5 Kifejezések kontextusba helyezése Arra is lehetségünk van, hogy egyes kulcszavakat a korpuszon belül szövegkörnyezetükben vizsgáljunk meg. Ehhez a kwic() függvényt használjuk, az argumentumok között a pattern = kifejezés után megadva azt a szót, amelyet vizsgálni szeretnénk, a window = után pedig megadhatjuk hogy az adott szó hány szavas környezetére vagyunk kíváncsiak. kwic(corpus_mineln, pattern = &quot;válság*&quot;, valuetype = &quot;glob&quot;, window = 3, case_insensitive = TRUE) %&gt;% head(5) #&gt; #&gt; [antall_jozsef_1990, 1167] Átfogó és mély | #&gt; [antall_jozsef_1990, 1283] kell hárítanunk a | #&gt; [antall_jozsef_1990, 2772] és a lakásgazdálkodás | #&gt; [antall_jozsef_1990, 5226] gazdaság egészét juttatta | #&gt; [antall_jozsef_1990, 5286] gazdaság reménytelenül eladósodott | #&gt; #&gt; válságba | süllyedtünk a nyolcvanas #&gt; válságot | , de csakis #&gt; válságos | helyzetbe került. #&gt; válságba | , és amellyel #&gt; válsággócai | ellen. A A lubridate használatának részletes leírása megtalálható az alábbi linken: https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf A lambda leírása megtalálható: https://quanteda.io/reference/textstat_collocations.html A különböz indexek leírása megtalálható az alábbi linken: https://quanteda.io/reference/textstat_lexdiv.html (Schütze, Manning, and Raghavan 2008) "],["szótáralapú-elemzések-érzelem-elemzés.html", "6 Szótáralapú elemzések, érzelem-elemzés 6.1 Szótárak az R-ben 6.2 Magyar Nemzet cikkek 6.3 MNB sajtóközlemények", " 6 Szótáralapú elemzések, érzelem-elemzés A szótár alapú szentiment elemzés egy egyszer ötleten alapul. Hogyha tudjuk hogy egyes szavak milyen érzelmeket, érzéseket, információt hordoznak, akkor minél gyakoribb egy-egy érzelem kategóriához tartozó szó, akkor a szentiment annál inkább jellemz lesz a dokumentumra amit vizsgálunk. Természetesen itt is jó pár dolognak kell teljesülnie ahhoz hogy az elemzésünk eredménye megbízható legyen. Mivel a szótár alapú elemzés az adott szentiment kategórián belüli kulcsszavak gyakoriságán alapul, ezért van aki nem tekinti statisztikai elemzésnek (lásd például Young and Soroka (2012)). A tágabb kvantitatív szövegelemzési kontextusban az osztályozáson (classification) belül a felügyelt módszerekhez hasonlóan itt is ismert kategóriákkal dolgozunk (pl.: egy kulcsszó az öröm kategóriába tartozik), csak egyszerbb módszertannal (Grimmer and Stewart 2013). A kulcsszavakra építés miatt a módszer a kvalitatív és kvantitatív kutatási vonalak találkozásának is tekinthet, hiszen egy-egy szónak az érzelmi töltete nem mindig ítélhet meg objektíven. Mint minden módszer esetében, amirl ebben a tankönyvben szó van, itt is kiemelten fontos hogy ellenrízzük hogy a használt szótár kategóriák és kulcsszavak fedik-e a valóságot. Más szavakkal: validate, validate, validate. A módszer elnyei: Tökéletesen megbízható: nincsen probabilisztikus eleme a számításoknak, mint például a Support Vector alapú osztályozásnál, illetve az emberi szövegkódolásnál elforduló problémákat is elkerüljük így. Képesek vagyunk vele mérni a szöveg látens dimenzióit. Széles körben alkalmazható, egyszeren számolható. A politikatudományon és számítógépes nyelvtudományokon belül nagyon sok kész szótár elérhet, amik különböz módszerekkel készültek és különböz területet fednek le (pl.: populizmus, pártprogramok policy tartalma, érzelmek, gazdasági tartalom.)10 Relatíve könnyen adaptálható egyik nyelvi környezetbl másikba. A módszer lehetéges hátrányai: A szótár hatékonysága és validitása azon múlik hogy mennyire egyezik a szótár és a vizsgálni kívánt dokumentum területe. Például jellemz hiba, hogy gazdasági bizonytalanságot szeretnék tzsdei jelentések alapján vizsgálni a kutatók egy általános szentimet szótár használatával. A terület-specifikus szótár építése egy kvalitatív folyamat (lsd. a lábjegyzetben), éppen ezért gyakran id és emberi erforrás igényes. A szózsák alapú elemzéseknél a kontextus elvész (ez gyakran igaz a bigram és trigramok használatánál is) a kulcsszavak esetében. Erre egy triviális példa a tagadás a mondatban: nem vagyok boldog esetén egy általános szentiment szótár a tagadás miatt félreosztályozná a mondat érzelmi töltését. Az elemzés sikere több faktortól is függ. Fontos hogy a korpuszban lév dokumentumokat körültekinten tisztítsuk meg az elemzés elején (lásd a 4. fejezetet a szövegelkészítésrl). A következ lépésben meg kell bizonyosodnunk arról, hogy a kiválasztott szentiment szótár alkalmazható a korpuszunkra. Amennyiben nem találunk alkalmas szótárt, akkor a saját szótár validálására kell figyelni. A negyedik fejezetben leírtak itt is érvényesek, érdemes a dokumentum-kifejezés mátrixot súlyozni valamilyen módon. 6.1 Szótárak az R-ben A szótár alapú elemzéshez a quanteda csomagot fogjuk használni, illetve a 3. fejezetben már megismert readr, stringr, dplyr tidyverse csomagokat.11 library(readr) library(stringr) library(dplyr) library(ggplot2) library(quanteda) library(quanteda.dictionaries) Mieltt a két esettanulmányt bemutatnánk, vizsgáljuk meg hogy hogyan néz ki egy szentiment szótár az R-ben. A szótárt kézzel úgy tudjuk létrehozni, hogy egy listán belül létrehozzuk karaktervektorként a kategóriákat és a kulcsszavakat és ezt a listát a quanteda dictionary függvényével eltároljuk. szentiment_szotar &lt;- dictionary( list( pozitiv = c(&quot;jó&quot;, &quot;boldog&quot;, &quot;öröm&quot;), negativ = c(&quot;rossz&quot;, &quot;szomorú&quot;, &quot;lehangoló&quot;) ) ) szentiment_szotar #&gt; Dictionary object with 2 key entries. #&gt; - [pozitiv]: #&gt; - jó, boldog, öröm #&gt; - [negativ]: #&gt; - rossz, szomorú, lehangoló A quanteda, quanteda.corpora és tidytext R csomagok több széles körben használt szentiment szótárat tartalmaznak, így nem kell kézzel replikálni minden egyes szótárat amit használni szeretnénk. A szentiment elemzési munkafolyamat amit a részfejezetben bemutatunk a következ lépésekbl áll: dokumentumok betöltése szöveg elkészítése a korpusz létrehozása dokumentum-kifejezés mátrix szótár betöltése a dokumentum-kifejezés mátrix szrése a szótárban lév kulcsszavakkal az eredmény vizualizálása, további felhasználása A fejezetben két különböz korpuszt fogunk elemezni: a 2006-os Magyar Nemzet címlapjainak egy 252 cikkbl álló mintájának szentimentjét vizsgáljuk egy magyar szentiment szótárral. A második korpusz a Magyar Nemzeti Bank angol nyelv sajtóközleményeibl áll, amin bemutatjuk egy széles körben használt gazdasági szótár használatát. 6.2 Magyar Nemzet cikkek mn_minta &lt;- read_csv(&quot;data/magyar_nemzet_small.csv&quot;) summary(mn_minta) #&gt; doc_id text doc_date #&gt; Min. : 1.0 Length:2834 Min. :2006-01-02 #&gt; 1st Qu.: 709.2 Class :character 1st Qu.:2006-03-29 #&gt; Median :1417.5 Mode :character Median :2006-06-28 #&gt; Mean :1417.5 Mean :2006-06-28 #&gt; 3rd Qu.:2125.8 3rd Qu.:2006-09-26 #&gt; Max. :2834.0 Max. :2006-12-29 A read_csv() segítségével beolvassuk a Magyar Nemzet adatbázis egy kisebb részét, ami az esetünkben a 2006-os címlapokon szerepl hírek . A summary(), ahogy a neve is mutatja, egy gyors áttekintést nyújt a betöltött adatbázisról. Látjuk, hogy 2834 sorból (megfigyelés) és 3 oszlopból (változó) áll. Az els ránézésre látszik hogy a text változónk tartalmazza a szövegeket, és hogy tisztításra szorulnak. Az els szöveget megnézve látjuk, hogy a standard elkészítési lépések mellett a sortörést (\\n) is ki kell törölnünk. mn_minta$text[1] #&gt; [1] &quot;Hat fovárosi képviselo öt percnél is kevesebbet beszélt egy év alatt a közgyulésben.\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n&quot; Habár a quanteda is lehetséget ad néhány elkészít lépésre, érdemes ezt olyan céleszközzel tenni ami nagyobb rugalmasságot ad a kezünkbe. Mi erre a célra a stringr csomagot használjuk. Els lépésben kitöröljük a sortöréseket (\\n), a központozást, számokat, kisbetsítünk minden szót. Elfordulhat hogy (számunkra nehezen látható) extra szóközök maradnak a szövegben. Ezeket az str_squish()-el tüntetjük el. A szöveg eleji és végi extra szóközöket (ún. leading vagy trailing white space) az str_trim() vágja le. mn_tiszta &lt;- mn_minta %&gt;% mutate( text = str_remove_all(string = text, pattern = &quot;\\n&quot;), text = str_remove_all(string = text, pattern = &quot;[:punct:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:digit:]&quot;), text = str_to_lower(text), text = str_trim(text), text = str_squish(text) ) A szöveg sokkal jobban néz ki, habár észrevehetjük hogy maradhattak benne problémás részek, fleg a sortörés miatt, ami sajnos hol egyes szavak közepén van (a jobbik eset), vagy pedig pont szóhatáron, ez esetben a két szó sajnos összevonódik. Az egyszerség kedvéért feltételezzük hogy ez kellen ritkán fordul el ahhoz hogy ne befolyásolja az elemzésünk eredményét. mn_tiszta$text[1] #&gt; [1] &quot;hat fovárosi képviselo öt percnél is kevesebbet beszélt egy év alatt a közgyulésben&quot; Miután kész a tiszta(bb) szövegünk, kreálunk egy korpuszt a quanteda corpus() fuggvenyevel. A létrehozott corpus objektum a szöveg mellett egyéb dokumentum meta adatokat is tud tárolni (dátum, író, hely, stb.) Ezeket mi is hozzáadhatjuk (erre majd látunk példát nemsokára) illetve amikor létrehozzuk a korpuszt a data frame-ünkbl, akkor automatikusan meta adatokként tárolódnak az változóink. Jelen esetben az egyetlen dokumentum változónk az a dátum lesz a szöveg mellett. A korpusz dokumentum változóihoz a docvars() segítségével tudunk hozzáférni. mn_corpus &lt;- corpus(mn_tiszta) head(docvars(mn_corpus), 5) #&gt; doc_date #&gt; 1 2006-01-02 #&gt; 2 2006-01-02 #&gt; 3 2006-01-02 #&gt; 4 2006-01-02 #&gt; 5 2006-01-02 A következ lépés a dokumentum-kifejezés mátrix létrehozása a dfm() függvénnyel (ami a document-feature matrix rövidítése). Elszr tokenekre bontjuk a szövegeket a tokens()-el, és aztán ezt a tokenizált szózsákot kapja meg a dfm inputnak. A sornak a végén a létrehozott mátrixunkat TF-IDF módszerrel súlyozzuk a dfm_tfidf() használatával. mn_dfm &lt;- mn_corpus %&gt;% tokens(what = &quot;word&quot;) %&gt;% dfm() %&gt;% dfm_tfidf() A cikkek szentimentjét egy magyar szótárral fogjuk becsülni, amit a Társadalomtudományi Kutatóközpont CSS-RECENS és a POLTEXTLab kutatói készítették.12 Két dimenziót tarlamaz (pozitív és negatív), 2299 pozitív és 2588 negatív kulcsszóval. Ez nem számít kirívóan nagynak a szótárak között, mivel az adott kategóriák minél teljesebb lefedése a cél. Azt is látjuk, hogy a kulcsszavak egyszavas tokenek (szóval nem érdemes bigramokat és trigramokat készítenünk a tokenizálás során), illetve nem szótövek (így szótöveznünk sem kell). poltext_szotar &lt;- read_rds(&quot;data/poltext_dict.Rds&quot;) poltext_szotar #&gt; Dictionary object with 2 key entries. #&gt; - [positive]: #&gt; - abszolút, ad, adaptív, adekvát, adócsökkentés, adókedvezmény, adomány, adományoz, adóreform, adottság, adottságú, áfacsökkentés, agilis, agytröszt, áhított, ajándék, ajándékoz, ajánl, ajánlott, akadálytalan [ ... and 2,279 more ] #&gt; - [negative]: #&gt; - aberrált, abnormális, abnormalitás, abszurd, abszurditás, ádáz, adócsalás, adócsaló, adós, adósság, áfacsalás, áfacsaló, affér, aggasztó, aggodalom, aggódik, aggódás, agresszió, agresszíven, agresszivitás [ ... and 2,568 more ] Az egyes dokumentumok szentimentjét a dfm_lookup() becsüli, ahol az elz lépésben létrehozott súlyozott dfm az input és a magyar szentimentszótár a dictionary. Egy gyors pillantás az eredményre és látjuk hogy minden dokumentumhoz készült egy pozitív és egy negatív értéket. A TF-IDF súlyozás miatt nem látunk egész számokat (a súlyozás nélkül a sima szófrekvenciát kapnánk). mn_szentiment &lt;- dfm_lookup(mn_dfm, dictionary = poltext_szotar) head(mn_szentiment, 5) #&gt; Document-feature matrix of: 5 documents, 2 features (40.0% sparse) and 1 docvar. #&gt; features #&gt; docs positive negative #&gt; 1 0 0 #&gt; 2 0.8375026 12.497973 #&gt; 3 0 0 #&gt; 4 21.1044299 6.449036 #&gt; 5 11.0358129 8.131890 Ahhoz hogy fel tudjuk használni a kapott eredményt, érdemes dokumentumváltozóként eltárolni a korpuszban. Ezt a fent már használt docvars() segítségével tudjuk megtenni, ahol a második argumentumkét az új változó nevét adjuk meg stringként. docvars(mn_corpus, &quot;pos&quot;) &lt;- as.numeric(mn_szentiment[, 1]) docvars(mn_corpus, &quot;neg&quot;) &lt;- as.numeric(mn_szentiment[, 2]) head(docvars(mn_corpus), 5) #&gt; doc_date pos neg #&gt; 1 2006-01-02 0.0000000 0.000000 #&gt; 2 2006-01-02 0.8375026 12.497973 #&gt; 3 2006-01-02 0.0000000 0.000000 #&gt; 4 2006-01-02 21.1044299 6.449036 #&gt; 5 2006-01-02 11.0358129 8.131890 Végül a kapott korpuszt a kiszámolt szentiment értékekkel a quanteda-ban lév convert() fügvénnyel data frame-é alakítjuk. A convert függvény dokumentációját érdemes elolvasni, mert ennek segítségével tudjuk a quanteda-ban elkészült objektumainkat átalakítani úgy, hogy azt más csomagok is tudják használni. mn_df &lt;- convert(mn_corpus, to = &quot;data.frame&quot;) summary(mn_df) #&gt; doc_id text doc_date pos #&gt; Length:2834 Length:2834 Min. :2006-01-02 Min. : 0.000 #&gt; Class :character Class :character 1st Qu.:2006-03-29 1st Qu.: 0.000 #&gt; Mode :character Mode :character Median :2006-06-28 Median : 2.373 #&gt; Mean :2006-06-28 Mean : 4.074 #&gt; 3rd Qu.:2006-09-26 3rd Qu.: 6.280 #&gt; Max. :2006-12-29 Max. :35.648 #&gt; neg #&gt; Min. : 0.000 #&gt; 1st Qu.: 0.000 #&gt; Median : 2.037 #&gt; Mean : 3.528 #&gt; 3rd Qu.: 5.348 #&gt; Max. :39.096 Mieltt vizualizálnánk az eredményt érdemes a napi szintre aggregálni a szentimentet és egy nettó értéket kalkulálni.13 mn_df &lt;- mn_df %&gt;% group_by(doc_date) %&gt;% summarise( daily_pos = sum(pos), daily_neg = sum(neg), net_daily = daily_pos - daily_neg ) A plot alapján egyértelm trendet nem lehet megállapítani és még a 2006-os év végi turbulens belpolitikai események sem feltétlenül jelennek meg markánsan. Ennek az oka abban is kereshet, hogy egy napilap címlapját ritkán dominálja teljes egészében a belpolitika és így a negatív és pozitív szentimentek kioltják egymást. Természetesen messzemen következtetéseket egy ábra alapján nem érdemes levonni, de az elemzésünk azt mutatja hogy a nyári hónapok alatt kevesebb volt az igazán negatív címlap, ellenben az év eleje és vége tartalmazta a minta alsó széls értékeit. ggplot(mn_df, aes(doc_date, net_daily)) + geom_line() + labs(y = &quot;Szentiment&quot;, x = NULL, caption = &quot;Adatforrás: https://cap.tk.hu/&quot;) Figure 6.1: Magyar Nemzet címlap szentimentje 6.3 MNB sajtóközlemények A második esettanulmányban a kontextuális szótár elemzést mutatjuk be egy angol nyelv korpusz és specializált szótár segítségével. A korpusz az MNB kamatdöntéseit kísér nemzetközi sajtóközleményei és a szótár pedig a Loughran and McDonald (2011) pénzügyi szentimentszótár.14 A szótár a quanteda.dictionaries csomag részeként elérhet, illetve a tankönyv honlapján is megtalálható. penzugy_szentiment #&gt; Dictionary object with 9 key entries. #&gt; - [NEGATIVE]: #&gt; - abandon, abandoned, abandoning, abandonment, abandonments, abandons, abdicated, abdicates, abdicating, abdication, abdications, aberrant, aberration, aberrational, aberrations, abetting, abnormal, abnormalities, abnormality, abnormally [ ... and 2,335 more ] #&gt; - [POSITIVE]: #&gt; - able, abundance, abundant, acclaimed, accomplish, accomplished, accomplishes, accomplishing, accomplishment, accomplishments, achieve, achieved, achievement, achievements, achieves, achieving, adequately, advancement, advancements, advances [ ... and 334 more ] #&gt; - [UNCERTAINTY]: #&gt; - abeyance, abeyances, almost, alteration, alterations, ambiguities, ambiguity, ambiguous, anomalies, anomalous, anomalously, anomaly, anticipate, anticipated, anticipates, anticipating, anticipation, anticipations, apparent, apparently [ ... and 277 more ] #&gt; - [LITIGIOUS]: #&gt; - abovementioned, abrogate, abrogated, abrogates, abrogating, abrogation, abrogations, absolve, absolved, absolves, absolving, accession, accessions, acquirees, acquirors, acquit, acquits, acquittal, acquittals, acquittance [ ... and 883 more ] #&gt; - [CONSTRAINING]: #&gt; - abide, abiding, bound, bounded, commit, commitment, commitments, commits, committed, committing, compel, compelled, compelling, compels, comply, compulsion, compulsory, confine, confined, confinement [ ... and 164 more ] #&gt; - [SUPERFLUOUS]: #&gt; - aegis, amorphous, anticipatory, appertaining, assimilate, assimilating, assimilation, bifurcated, bifurcation, cessions, cognizable, concomitant, correlative, deconsolidation, delineation, demonstrable, demonstrably, derecognized, derecognizes, derivatively [ ... and 36 more ] #&gt; [ reached max_nkey ... 3 more keys ] A szentiment szótár 9 kategóriából áll. A legtöbb kulcsszó a negatív dimenzióhoz van (2355). A munkamenet hasonló a Magyar Nemzetes példához: adat betöltés szövegtisztítás korpusz tokenek kulcs kontextuális tokenek szrése dfm elállítás és szentiment számítás az eredmény vizualizálása, további felhasználása mnb_pr &lt;- read_csv(&quot;data/mnb_pr_corpus.csv&quot;) summary(mnb_pr) #&gt; date text id year #&gt; Min. :2005-01-24 Length:180 Min. : 1.00 Min. :2005 #&gt; 1st Qu.:2008-10-14 Class :character 1st Qu.: 45.75 1st Qu.:2008 #&gt; Median :2012-07-10 Mode :character Median : 90.50 Median :2012 #&gt; Mean :2012-07-08 Mean : 90.50 Mean :2012 #&gt; 3rd Qu.:2016-03-30 3rd Qu.:135.25 3rd Qu.:2016 #&gt; Max. :2019-12-17 Max. :180.00 Max. :2019 Az adatbázisunk 180 megfigyelésbl és 4 változóból áll. Az egyetlen lényeges dokumentum meta adat itt is a szövegek megjelenési ideje. A szövegeket ugyanazokkal a standard eszközökkel kezeljük mint a Magyar Nemzet esetében. Érdemes minden esetben ellenrizni, hogy az R kód amit használunk az tényleg azt csinálja-e mint amit szeretnénk hogy csináljon. Ez hatványozottan igaz abban az esetben, amikor szövegekkel és regular expressionökkel dolgozunk. mnb_tiszta &lt;- mnb_pr %&gt;% mutate( text = str_remove_all(string = text, pattern = &quot;[:cntrl:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:punct:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:digit:]&quot;), text = str_to_lower(text), text = str_trim(text), text = str_squish(text) ) Miután rendelkezésre állnak a tiszta dokumentumaink, egy karaktervektorba gyjtjük azokat a kulcsszavakat amelyek környékén szeretnénk megfigyelni a szentiment alakulását. A példa kedvéért mi az unemp*, growth, gdp, inflation* szótöveket és szavakat választottuk. A tokens_keep() megtartja a kulcsszavainkat és egy általunk megadott +/- n tokenes környezetüket (jelen esetben 10). A szentiment elemzést pedig már ezen a jóval kisebb mátrixon fogjuk lefuttatni. A phrase() segítségével több szóból álló kifejezéséket is vizsgálhatunk. Ilyen szókapcsolat például az Európai Unió is, ahol lényeges hogy egyben kezeljük a két szót. mnb_corpus &lt;- corpus(mnb_tiszta) gazdasag &lt;- c(&quot;unemp*&quot;, &quot;growth&quot;, &quot;gdp&quot;, &quot;inflation*&quot;, &quot;inflation expectation*&quot;) mnb_token &lt;- tokens(mnb_corpus) %&gt;% tokens_keep(pattern = phrase(gazdasag), window = 10) A szentimentet most is egy súlyozott dfm-bl számoljuk. A kész eredményt hozzáadjuk a korpuszhoz majd data framet hozunk létre belle. A 9 kategóriából 5-öt adunk választunk csak ki, amelyeknek jegybanki környezetben értelmezhet tartalma van. mnb_szentiment &lt;- tokens_lookup(mnb_token, dictionary = penzugy_szentiment) %&gt;% dfm() %&gt;% dfm_tfidf() docvars(mnb_corpus, &quot;negative&quot;) &lt;- as.numeric(mnb_szentiment[, &quot;negative&quot;]) docvars(mnb_corpus, &quot;positive&quot;) &lt;- as.numeric(mnb_szentiment[, &quot;positive&quot;]) docvars(mnb_corpus, &quot;uncertainty&quot;) &lt;- as.numeric(mnb_szentiment[, &quot;uncertainty&quot;]) docvars(mnb_corpus, &quot;constraining&quot;) &lt;- as.numeric(mnb_szentiment[, &quot;constraining&quot;]) docvars(mnb_corpus, &quot;superfluous&quot;) &lt;- as.numeric(mnb_szentiment[, &quot;superfluous&quot;]) mnb_df &lt;- convert(mnb_corpus, to = &quot;data.frame&quot;) A célunk hogy szentiment kategóriánkénti bontásban mutassuk be az elemzésünk eredményét, de eltte egy kicsit alakítani kell a data frame-n, hogy a második fejezetben is tárgyalt tidy formára hozzuk. A különböz szentiment értékeket tartalmazó oszlopokat fogjuk átrendezni úgy hogy kreálunk egy sent_type változót ahol a kategória nevet fogjuk eltárolni és egy sent_score változót, ahol a szentiment értéket. Ehhez a tidyr-ben található pivot_longer() -t használjuk. mnb_df &lt;- mnb_df %&gt;% pivot_longer( cols = negative:superfluous, names_to = &quot;sent_type&quot;, values_to = &quot;sent_score&quot; ) Az átalakítás után már könnyedén tudjuk kategóriákra bontva megjeleníteni az MNB közlemények különböz látens dimenzióit. Fontos emlékezni arra, hogy ez az eredmény a kulcsszavaink +/- 10 tokenes környezetében lév szavak szentimentjét mérik. Ami érdekes eredmény, hogy a felesleges töltelék szövegek (superflous kategória) szinte soha nem fordulnak el a kulcsszavaink körül. A többi érték is nagyjából megfelel a várakozásainknak, habár a 2008-as gazdasági válság nem tnik kiugró pontnak. Azonban a 2010 utáni európai válság már láthatóan megjelenik az idsorainkban. A szótár amit használtunk az alapveten az Egyesült Államokban a tzsdén kereskedett cégek publikus beszámolóiból készült így elképzelhet, hogy egyes jegybanki környezetben sokat használt kifejezés nincs benne. A validálásra a kapott eredményeknek ezért is nagyon fontos, illetve érdemes azzal is tisztában lenni hogy a szótáras módszer nem tökéletes (ahogy az emberi vagy más gépi kódolás sem). ggplot(mnb_df, aes(date, sent_score)) + geom_line() + labs( y = &quot;Szentiment&quot;, x = NULL ) + facet_wrap(~sent_type, ncol = 2) Figure 6.2: Magyar Nemzeti Bank közleményeinek szentimentje A lehetséges, területspecifikus szótáralkotási módszerekrl részletesebben ezekben a cikkekben lehet olvasni: Laver and Garry (2000); Young and Soroka (2012); Loughran and McDonald (2011); Máté, Sebk, and Barczikay (2021) A szentiment elemzéshez gyakran használt csomag még a tidytext. Az online is szabadon elérhet Silge and Robinson (2017) 2. fejezetében részletesen is bemutatják a szerzk a tidytext munkafolyamatot (https://www.tidytextmining.com/sentiment.html). A szótár elérhet a online. LINKET HOZZADNI A csoportosított adatokkal való munka bvebb bemutatását lsd. a Függelékben A témával részletesebben is foglalkoztunk a Máté, Sebk, and Barczikay (2021) tanulmányban, ahol egy saját monetáris szentiment szótárt mutatunk be. Az implementáció és a hozzá tartozó R forráskód a nyilvános https://doi.org/10.6084/m9.figshare.13526156.v1 linken. "],["felügyelet-nélküli-tanulás-topik-modellezés-magyar-törvényszövegeken.html", "7 Felügyelet nélküli tanulás: Topik modellezés magyar törvényszövegeken 7.1 K közép klaszterezés kvalitatív adatokkal 7.2 Látens Dirichlet Allokáció topik modellek15 7.3 Struktúrális topik modellek", " 7 Felügyelet nélküli tanulás: Topik modellezés magyar törvényszövegeken A klaszterezés egy adathalmaz pontjainak, rekordjainak hasonlóság alapján való csoportosítása, ami szinte minden nagyméret adathalmaz leíró modellezésére alkalmas. A klaszterezés során az adatpontokat diszjunkt halmazokba, azaz klaszterekbe soroljuk, hogy az elemeknek egy olyan partíciója jöjjön létre, amelyben a közös csoportokba kerül elempárok lényegesen hasonlóbbak egymáshoz, mint azok a pontpárok, melyek két különböz csoportba sorolódtak. Klaszterezés során a megfelel csoportok kialakítása nem egyértelm feladat, mivel a különböz adatok eltér jelentése és felhasználása miatt adathalmazonként más szempontokat kell figyelembe vennünk. Egy klaszterezési feladat megoldásához ismernünk kell a különböz algoritmusok alapvet tulajdonságait és mindig szükség van az eredményként kapott klaszterezés kiértékelésére. Mivel egy klaszterezés az adatpontok hasonlóságából indul ki, ezért az eljárás során az els fontos lépés az adatpontok páronkénti hasonlóságát lehet legjobban megragadó hasonlósági függvény kiválasztása (Tan, Steinbach, and Kumar 2011). Számos klaszterezési eljárás létezik, melyek között az egyik leggyakoribb különbségtétel, hogy a klaszterek egymásba ágyazottak vagy sem. Ez alapján beszélhetünk hierarchikus és felosztó klaszterezésrl. A hierarchikus klaszterezés egymásba ágyazott klaszterek egy fába rendezett halmaza, azaz ahol a klaszterek alklaszterekkel rendelkeznek. A fa minden csúcsa (klasztere), a levélcsúcsokat kivéve, a gyermekei (alklaszterei) uniója, és a fa gyökere az összes objektumot tartalmazó klaszter. Felosztó (partitional) klaszterezés esetén az adathalmazt olyan, nem átfed alcsoportokra bontjuk, ahol minden adatobjektum pontosan egy részhalmazba kerül (Tan, Steinbach, and Kumar 2011; Tikk 2007). A klaszterezési eljárások között aszerint is különbséget tehetünk, hogy azok egy objektumot csak egy vagy több klaszterbe is beilleszthetnek. Ez alapján beszélhetünk kizáró (exclusive), illetve nem-kizáró (non exclusive), vagy átfed (overlapping) klaszterezésrl. Az elbbi minden objektumot csak egyetlen klaszterhez rendel hozzá, az utóbbi esetén egy pont több klaszterbe is beleillik. Fuzzy klaszterezés esetén minden objektum minden klaszterbe beletartozik egy tagsági súly erejéig, melynek értéke 0 (egyáltalán nem tartozik bele) és 1 (teljesen beletartozik) közé esik. A klasztereknek is különböz típusai vannak, így beszélhetünk prototípus-alapú, gráf-alapú vagy srség-alapú klaszterekrl. A prototípus-alapú klaszter olyan objektumokat tartalmazó halmaz, amelynek mindegyik objektuma jobban hasonlít a klasztert definiáló objektumhoz, mint bármelyik másik klasztert definiáló objektumhoz. A prototípus-alapú klaszter klaszterek közül a K-közép klaszter az egyik leggyakrabban alkalmazott. A K-közép klaszterezési módszer els lépése K darab kezd középpontot kijelölése, ahol K a klaszterek kívánt számával egyenl. Ezután minden adatpontot a hozzá legközelebb es középponthoz rendelünk. Az így képzett csoportok lesznek a kiinduló klaszterek. Ezután újra meghatározzuk mindegyik klaszter középpontját a klaszterhez rendelt pontok alapján. A hozzárendelési és frissítési lépéseket felváltva folytatjuk addig, amíg egyetlen pont sem vált klasztert, vagy ameddig a középpontok ugyanazok nem maradnak (Tan, Steinbach, and Kumar 2011). 7.1 K közép klaszterezés kvalitatív adatokkal A K közép klaszterezés tehát a dokumentumokat alkotó szavak alapján keresi meg a felhasználó által megadott számú (K) klasztert, amelyeket a középpontjaik képviselnek, és így rendezi a dokumentumokat csoportokba. A klaszterezés vagy csoportosítás egy induktív kategorizálás, ami akkor hasznos, amikor nem állnak a kutató rendelkezésére elzetesen ismert csoportok, amelyek szerint a vizsgált dokumentumokat rendezni tudná. Hiszen ebben az esetben a korpusz elemeinek rendezéséhez nem határozunk meg elzetesen csoportokat, hanem az eljárás során olyan különálló csoportokat hozunk létre a dokumentumokból, amelynek tagjai valamilyen szempontból hasonlítanak egymásra. A csoportosítás legfbb célja az, hogy az egy csoportba kerül szövegek minél inkább hasonlítsanak egymásra, miközben a különböz csoportba kerülk minél inkább eltérjenek egymástól. Azaz klaszterezésnél nem egy-egy szöveg jellemzire vagyunk kíváncsiak, hanem arra, hogy a szövegek egy-egy csoportja milyen hasonlóságokkal bír (Tikk 2007; Burtejin 2016). A gépi kódolással végzett klaszterezés egy felügyelet nélküli tanulás, mely a szöveg tulajdonságaiból tanul, anélkül, hogy elre meghatározott csoportokat ismerne. Alkalmazása során a dokumentum tulajdonságait és a modell becsléseit felhasználva jönnek létre a különböz kategóriák, melyekhez késbb hozzárendeli a szöveget (Grimmer and Stewart 2013). Az osztályozással ellentétben a csoportosítás esetén tehát nincs ismert címkékkel\" ellátott kategóriarendszer vagy olyan minta, mint az osztályozás esetében a tanítókörnyezet, amibl tanulva a modellt fel lehet építeni (Tikk 2007). A gépi kódolással végzett csoportosítás (klaszterezés) esetén a kutató feladata a megfelel csoportosító mechanizmus kiválasztása, mely alapján egy program végzi el a szövegek különböz kategóriákba sorolását. Ezt követi a hasonló szövegeket tömörít csoportok elnevezésének lépése. A több dokumentumból álló korpuszok esetében a gépi klaszterelemzés különösen eredményes és költséghatékony lehet, mivel egy nagy korpusz vizsgálata sok erforrást igényel (Grimmer and Stewart 2013, 1 o.) A klaszterezés bemutatásához a rendszerváltás utáni magyar miniszterelnökök egy-egy véletlenszeren kiválasztott beszédét használjuk. library(readr) library(dplyr) library(purrr) library(stringr) library(readtext) library(quanteda) library(tidytext) library(ggplot2) library(topicmodels) library(factoextra) library(stm) library(igraph) A beszédek szövege meglehetsen tiszta, ezért az egyszerség kedvéért a most kihagyjuk a szövegtisztítás lépéseit. Az elemzés els lépéseként a quanteda csomaggal egy korpusz kreálunk, majd abból egy dokumentum-kifejezés mátrixot készítünk a dfm() függvénnyel. beszedek &lt;- read_csv(&quot;data/miniszterelnokok.csv&quot;) beszedek_corpus &lt;- corpus(beszedek) beszedek_dfm &lt;- dfm(beszedek_corpus) A beszédek klaszterekbe rendezését az R egyik alapfüggvénye végzi, a kmeans. Els lépésben 3 klasztert készítünk. A table() függvénnyel megnézhetjük hogy egy-egy csoportba hány dokumentum került. beszedek_klaszter &lt;- kmeans(beszedek_dfm, centers = 2) table(beszedek_klaszter$cluster) #&gt; #&gt; 1 2 #&gt; 5 2 A felügyelet nélküli klasszifikáció nagy kérdése, hogy hány klasztert készítsünk, hogy megközelítsük a valóságot és ne csak mesterségesen kreáljunk csoportokat abban az esetben is amikor ténylegesen nem léteznek. A kvalitatív megközelítések mellett kvantitatív opciók is vannak. A factoextra csomagban több ilyen módszer is van implementálva. A lenti ábra azt mutatja hogy a klasztereken belüli négyzetösszegek hogyan változnak a k paraméter változásának függvényében. A lenti ábra alapján az ideális klaszter szám 2. fviz_nbclust(as.matrix(beszedek_dfm), kmeans, method = &quot;wss&quot;, k.max = 5) Vizuálisan is megjeleníthetjük a kialakított csoportokat. fviz_cluster(beszedek_klaszter, data = beszedek_dfm) 7.2 Látens Dirichlet Allokáció topik modellek15 A topik-modellezés a dokumentumok téma-klasztereinek meghatározására szolgáló valószínség-alapú eljárás, amely szó-gyakoriságot állapít meg minden témához, és minden dokumentumhoz hozzárendeli az adott témák valószínségét. A topik modellezés egy felügyelet nélküli tanulási módszer, amely során az alkalmazott algoritmus a dokumentum tulajdonságait és a modell becsléseit felhasználva hoz létre különböz kategóriákat, melyekhez késbb hozzárendeli a szöveget (Tikk 2007; Grimmer and Stewart 2013; Burtejin 2016). Az egyik leggyakrabban alkalmazott topik modellezési eljárás, a Látens Dirichlet Allokáció (LDA) alapja az a feltételezés, hogy minden korpusz topikok/témák keverékébl áll, ezen témák pedig statisztikailag a korpusz szókészlete valószínségi függvényeinek (eloszlásának) tekinthetek (Blei, Ng, and Jordan 2003). Az LDA a korpusz dokumentumainak csoportosítása során az egyes dokumentumokhoz topik szavakat rendel, a topikok megbecsléséhez pedig a szavak együttes megjelenését vizsgálja a dokumentum egészében. Az LDA algoritmusnak elzetesen meg kell adni a keresett klaszterek (azaz a keresett topikok) számát, ezt követen a dokumentumhalmazban szerepl szavak eloszlása alapján az algoritmus azonosítja a kulcsszavakat, amelyek eloszlása kirajzolja a topikokat (Blei, Ng, and Jordan 2003; Burtejin 2016; Jacobi, Van Atteveldt, and Welbers 2016). A következkben a magyar törvények korpuszán szemléltetjük a topik modellezés módszerét, hogy a mesterséges intelligencia segítségével feltárjuk a korpuszon belüli rejtett összefüggéseket. A korábban leírtak szerint tehát nincsenek elre meghatározott kategóriáink, dokumentumainkat a klaszterezés segítségével szeretnénk csoportosítani. Egy-egy dokumentumban keveredhetnek a témák és az azokat reprezentáló szavak. Mivel ugyanaz a szó több topikhoz is kapcsolódhat, így az eljárás komplex elemzési lehetséget nyújt, az egy szövegen belül témák és akár azok dokumentumon belüli súlyának azonosítására. Példánkban csak a korpusz egy részén szemléltetjük a topik modellezést, a teljes korpusz és annak elemzéséhez szükséges kód elérhet az alábbi GitHub linken: https://github.com/poltextlab Az alábbiakban 1998-2002 és a 2002-2006-os parlamenti ciklus 1032 törvényszövegének topik modellezését és a szükséges elkészít, korpusztisztító lépéseket mutatjuk be. A fájlokat töltsük be az R által használt munkakönyvtárba.16 Töltsük be az elemezni kívánt csv fájlt, megadva az elérési útvonalát. torvenyek &lt;- read_csv(&quot;data/lawtext_1998_2006.csv&quot;) Az elz fejezetekben láthattuk hogy hogyan lehet használni a stringr csomagot a szövegtisztításra. A lépések a már megismert sztenderd folyamatot követik: számok, központozás, sortörések, extra szóközök eltávolítása, illetve a szöveg kisbetsítése. Az eddigieket további szövegtisztító lépésekkel is kiegészíthetjük. Olyan elemek esetében, amelyek nem feltétlenül különálló szavak és el akarjuk távolítani ket a korpuszból szintén az str_remove_all() a legegyszerbb megoldás. torvenyek_tiszta &lt;- torvenyek %&gt;% mutate( text = str_remove_all(string = text, pattern = &quot;[:cntrl:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:punct:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:digit:]&quot;), text = str_to_lower(text), text = str_trim(text), text = str_squish(text), text = str_remove_all(string = text, pattern = &quot;&quot;), text = str_remove_all(string = text, pattern = &quot;&quot;), text = str_remove_all(string = text, pattern = &quot;&quot;), text = str_remove_all(string = text, pattern = &quot;&quot;), text = str_remove_all(string = text, pattern = &quot;&quot;), text = str_remove_all(string = text, pattern = &quot;&quot;), text = str_remove_all(string = text, pattern = &quot;«&quot;), text = str_remove_all(string = text, pattern = &quot;»&quot;), text = str_remove_all(string = text, pattern = &quot;§&quot;), text = str_remove_all(string = text, pattern = &quot;°&quot;), text = str_remove_all(string = text, pattern = &quot;&lt;U+25A1&gt;&quot;), text = str_remove_all(string = text, pattern = &quot;@&quot;) ) A dokumentum változókat egy külön fájlból adjuk hozzá, ami a törvények keletkezési évét tartalmazza, illetve hogy melyik kormányzati ciklusban születtek. Mindkét adatbázisban egy közös egyedi azonosító jelöli az egyes törvényeket, így ki tudjuk használni a dplyr left_join() függvényét, ami hatékonyan és gyorsan kapcsol össze adatbázisokat közös egyedi azonosító mentén. Jelen esetben ez az egyedi azonosító a txt_filename oszlopból fog elkészülni, amely a törvények neveit tartalmazza. Els lépésben betöltjük a meta adatokat tartalmazó .csv fájlt, majd a .txt rész eltti törvényneveket tartjuk csak meg a létrehozott doc_id- oszlopban. A [^\\\\.]* regular expression itt a string elejétl indulva kijelöl mindent az elso . karakterig. Az str_extract() pedig ezt a kijelölt string szakaszt (ami a törvények neve) menti át az új változónkba. torveny_meta &lt;- read_csv(&quot;data/cap_law_meta.csv&quot;) torveny_meta &lt;- torveny_meta %&gt;% mutate(doc_id = str_extract(txt_filename, &quot;[^\\\\.]*&quot;)) %&gt;% select(-txt_filename) head(torveny_meta, 5) #&gt; # A tibble: 5 x 4 #&gt; year electoral_cycle majortopic doc_id #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1998 1998-2002 13 1998XXXV #&gt; 2 1998 1998-2002 20 1998XXXVI #&gt; 3 1998 1998-2002 3 1998XXXVII #&gt; 4 1998 1998-2002 6 1998XXXVIII #&gt; 5 1998 1998-2002 13 1998XXXIX Végül összefzzük a dokumentumokat és a meta adatokat tartalmazó data frameket. torveny_final &lt;- left_join(torvenyek_tiszta, torveny_meta, by = &quot;doc_id&quot;) Majd hozzuk létre a korpuszt és ellenrizzük azt. #&gt; Text Types Tokens Sentences year electoral_cycle majortopic #&gt; 1 1998L 2879 9628 1 1998 1998-2002 3 #&gt; 2 1998LI 352 680 1 1998 1998-2002 20 #&gt; 3 1998LII 446 992 1 1998 1998-2002 9 #&gt; 4 1998LIII 126 221 1 1998 1998-2002 9 #&gt; 5 1998LIV 835 2013 1 1998 1998-2002 9 Az RStudio environments fülén láthatjuk, hogy egy 1032 elembl álló korpusz jött létre, amelynek tartalmát a summary() paranccsal kiíratva a console ablakban megjelenik a dokumentumok listája és a fbb leíró statisztikai adatok (egyedi szavak - types; szószám - tokens; mondatok - sentences). Az elbbi fejezettl eltéren most a tokenizálás során is végzünk még egy kis tisztítást: a felesleges stop szavakat kitöröljük a tokens_remove() és stopwords() kombinálásával. A quanteda tartalmaz egy beépített magyar stopszó szótárat. A második lépésben szótövesítjük a tokeneket a tokens_words() használatával, ami szintén képes a magyar nyelv szövegeket kezelni. Szükség esetén a beépített magyar nyelv stopszó szótárat saját stopszavakkal is kiegészíthetjük. Ehhez elször csv fájlba el kell mentenünk a stopszavakat, majd a csv fájlt be kell olvasnunk. Az pull() egy karaktervektort fog kreálni a data frame text oszlopából. custom_stopwords &lt;- readtext(&quot;data/custom_legal_stopwords.csv&quot;, encoding = &quot;UTF8&quot;) %&gt;% pull(text) Mivel jogi szövegekrl van szó, ezért még egy kis extra szószedetet is készítnk a felesleges szavakról. custom_stopwords_egyeb &lt;- c(&quot;lábjegyzet&quot;, &quot;országgyulés&quot;, &quot;ülésnap&quot;) Aztán pedig a pipe használatával elkészítjük a token objektumunkat. A szótövesített tokeneket egy külön objektumban tároljuk, mert gyakran elfordul hogy torvenyek_tokens &lt;- tokens(torvenyek_corpus) %&gt;% tokens_remove(stopwords(&quot;hungarian&quot;)) %&gt;% tokens_remove(custom_stopwords) %&gt;% tokens_remove(custom_stopwords_egyeb) %&gt;% tokens_wordstem(language = &quot;hun&quot;) Végül eltávolítjuk a dokumentum kifejezés mátrixból a túl gyakori kifejezéseket. A dfm_trim() függvénnyel a nagyon ritka és nagyon gyakori szavak megjelenését kontrollálhatjuk. A termfreq_type opció \"prop\" akkor 0 és 1.0 közötti értéket vehetnek fel a max_termfreq/docfreq és min_termfreq/docfreq paraméterek. A lenti példában azokat a tokeneket tartjuk meg, amelyek legalább egyszer elfordulnak ezer dokumentumonként (így kizárva a nagyon ritka kifejezéseket). torvenyek_dfm &lt;- dfm(torvenyek_tokens) %&gt;% dfm_trim(min_termfreq = 0.001, termfreq_type = &quot;prop&quot;) A szövegtisztító lépesek eredményét úgy ellenrizhetjük, hogy az 2. fejezetben bemutatottak szerint szógyakorisági listát készítünk a korpuszban maradt kifejezésekrl. Itt kihasználhatjuk a korpuszunkban lév meta adatokat és megnézhetjük ciklus szerinti bontásban a szófrekvencia ábrát. Az ábránál figyeljünk arra hogy a tidytext reorder_within függvényét használjuk, ami egy nagyon hasznos megoldás a csoportosított sorrendbe rendezésre a ggplot2 ábránál. top_tokens &lt;- textstat_frequency(torvenyek_dfm, n = 15, groups = docvars(torvenyek_dfm, field = &quot;electoral_cycle&quot;)) ggplot(top_tokens, aes(reorder_within(feature, frequency, group), frequency)) + geom_point(aes(shape = group), size = 2) + coord_flip() + labs(y = NULL, x = &quot;szófrekvencia&quot;) + facet_wrap(~group, nrow = 2, scales = &quot;free&quot;) + tidytext::scale_x_reordered() Figure 7.1: A 15 leggyakoribb token a korpuszban A szövegtisztító lépéseket késbb újabbakkal is kiegészíthetjük, ha észrevesszük, hogy az elemzést zavaró tisztítási lépés maradt ki. Ilyen esetben tovább tisztíthatjuk a korpuszt, majd újra lefuttathatjuk az elemzést. Például, ha szükséges, további stopszavak eltávolítását is elvégezhetjük egy újabb stopszólista hozzáadásával. Ilyenkor ugyanúgy járunk el, mint az elz stopszólista esetén, vagyis beolvassuk a munkakönyvtárban elhelyezett a csv fájlt, a beolvasott stopszólistából karakter vektort majd objektumot hozunk létre, végezetül pedig ezeket a szavakat is eltávolítjuk a kopuszból. custom_stopwords2 &lt;- readtext(&quot;data/custom_stopwords2.csv&quot;, encoding = &quot;UTF8&quot;) %&gt;% pull(text) torvenyek_tokens_final &lt;- torvenyek_tokens %&gt;% tokens_remove(custom_stopwords2) Ezután újra ellenrizzük az eredményt. torvenyek_dfm_final &lt;- dfm(torvenyek_tokens_final) %&gt;% dfm_trim(min_termfreq = 0.001, termfreq_type = &quot;prop&quot;) top_tokens_final &lt;- textstat_frequency(torvenyek_dfm_final, n = 15, groups = docvars(torvenyek_dfm, field = &quot;electoral_cycle&quot;)) ggplot(top_tokens_final, aes(reorder_within(feature, frequency, group), frequency)) + geom_point(aes(shape = group), size = 2) + coord_flip() + labs( y = NULL, x = &quot;szófrekvencia&quot; ) + facet_wrap(~group, nrow = 2, scales = &quot;free&quot;) + tidytext::scale_x_reordered() Figure 7.2: A 15 leggyakoribb token a korpuszban, a bovített stop szó listával A szövegtisztító és korpusz elkészít mveletek után következhet az LDA illesztése. Az alábbiakban az LDA illesztés két módszerét a VEM-et és a Gibbs-et mutatjuk be. A modell minkét módszer esetén ugyanaz, a különbség a következtetés módjában van. A VEM módszer variációs következtetés, míg a Gibbs mintavételen alapuló következtetés. (Blei, Ng, and Jordan 2003; Griffiths and Steyvers 2004; Phan, Nguyen, and Horiguchi 2008) A két modell illesztése nagyon hasonló, meg kell adnunk, az elemezni kívánt dfm nevét, majd a k\" értékét, ami egyenl az általunk létrehozni kívánt topikok számával, ezt követen meg kell jelölnünk, hogy a VEM vagy a Gibbs módszert alkalmazzuk. A set.seed() a funkció az R véletlen szám generátor magjának beállítására szolgál, ami ahhoz kell, hogy az eredmény, ábra, stb. pontosan reprodukálható legyen. A set.seed() bármilyen tetszleges egész szám lehet. Kihasználhatjuk hogy minden dokumentumhoz tartozik egy kormányzati ciklus azonosító, mivel ésszer lehet a feltételezés, hogy különböz parlamentek és kormányok más-más jogalkotási fókusszal rendelkeznek. A dokumentum változók alapján a dfm_subset()-el tudjuk feldarabolni a már elkészült és tisztított mátrixunkat. dfm_98_02 &lt;- dfm_subset(torvenyek_dfm_final, electoral_cycle == &quot;1998-2002&quot;) dfm_02_06 &lt;- dfm_subset(torvenyek_dfm_final, electoral_cycle == &quot;2002-2006&quot;) 7.2.1 A VEM\" módszer alkalmazása a magyar törvények korpuszán Saját korpuszunkon elször a VEM a módszert alkalmazzuk, ahol k = 10 azaz a modell 10 témacsoportot alakít ki. Mint arról korábban már volt szó a k értékét szabadon változtathatjuk, aszerint hogy hány topik kialakítását szeretnénk. Bár a k értékének meghatározása kutatói döntésen alapul, és a modell futtatása során bevett gyakorlat a különböz k\" értékekkel való kísérletezés, miután elkészült az elemzés a perplexity() funkció segítségével  ahol a theta az adott topikhoz való tartozás valószínsége  lehetségünk van az elkészült modell kiértékelésére. A függvény a topikok által reprezentált elméleti szóeloszlásokat hasonlítja össze a szavak tényleges eloszlásával a dokumentumokban. A függvény értéke nem önmagában értelmezend, hanem két modell összehasonlításában, ahol a legalacsonyabb perplexity (zavarodottság) értékkel rendelkez modellt tekintik a legjobbnak.17 Az illusztráció kedvéért lefuttatunk 4 LDA modellt az 1998-2002 kormányzati ciklushoz tartozó dfm-en. Az iterációhoz a purrr csomag map függvényét használjuk (ez a lapply tidyverse ekvivalense). Fontos emlékezni arra, hogy minél nagyobb a korpuszunk annál több számítási kapacitásra van szükség (és annál tovább tart a számítás). k_topics &lt;- c(5, 10, 15, 20) lda_98_02 &lt;- k_topics %&gt;% map(LDA, x = dfm_98_02, control = list(seed = 1234)) perp_df &lt;- tibble( k = k_topics, perplexity = map_dbl(lda_98_02, perplexity) ) ggplot(perp_df, aes(k, perplexity)) + geom_point() + geom_line() + labs( x = &quot;k&quot;, y = &quot;Perplexity&quot; ) Figure 7.3: Perplexity változása a k függvényében A perplexity pontszám alapján a 20 topikos modell szerepel a legjobban, de fontos emlékezni arra hogy a megfelel k kiválasztása a kutató kvalitatív döntésén múlik. Ehhez természetesen kvantitatív szempontokat is figyelembe vehetünk, mint például a perplexity indikátor.18 A reprodukálhatóság és futási sebesség érdekében a fejezet további részeiben a k paraméternek 10-es értéket adunk. Ezzel lefuttatunk egy-egy modellt a két ciklusra. vem_98_02 &lt;- LDA(dfm_98_02, k = 10, method = &quot;VEM&quot;, control = list(seed = 1234)) vem_02_06 &lt;- LDA(dfm_02_06, k = 10, method = &quot;VEM&quot;, control = list(seed = 1234)) Ezt követen a modell által létrehozott topic-okat tidy formátumba tesszük és egyesítjük egy data frameben.19 topics_98_02 &lt;- tidy(vem_98_02, matrix = &quot;beta&quot;) %&gt;% mutate(electoral_cycle = &quot;1998-2002&quot;) topics_02_06 &lt;- tidy(vem_02_06, matrix = &quot;beta&quot;) %&gt;% mutate(electoral_cycle = &quot;2002-2006&quot;) lda_vem &lt;- bind_rows(topics_98_02, topics_02_06) Majd listázzuk az egyes topikokhoz tartozó leggyakoribb kifejezéseket. top_terms &lt;- lda_vem %&gt;% group_by(electoral_cycle, topic) %&gt;% top_n(5, beta) %&gt;% top_n(5, term) %&gt;% ungroup() %&gt;% arrange(topic, -beta) Majd a ggplot2 csomag segítségével ábrán is megjeleníthetjük az egyes topikok 10 legfontosabb kifejezését. top_terms %&gt;% filter(electoral_cycle == &quot;1998-2002&quot;) %&gt;% ggplot(aes(reorder_within(term, beta, topic), beta)) + geom_col(show.legend = FALSE) + facet_wrap(~topic, scales = &quot;free&quot;, ncol = 2) + coord_flip() + labs( x = NULL, y = expression(beta) ) + tidytext::scale_x_reordered() Figure 7.4: 1998-2002 ciklus topikok és kifejezések (VEM mintavételezéssel) top_terms %&gt;% filter(electoral_cycle == &quot;2002-2006&quot;) %&gt;% ggplot(aes(reorder_within(term, beta, topic), beta)) + geom_col(show.legend = FALSE) + facet_wrap(~topic, scales = &quot;free&quot;, ncol = 2) + coord_flip() + labs( x = NULL, y = expression(beta) ) + tidytext::scale_x_reordered() Figure 7.5: 2002-2006 ciklus topikok és kifejezések (VEM mintavételezéssel) 7.2.2 Az LDA Gibbs\" módszer alkalmazása a magyar törvények korpuszán A következkben ugyanazon a korpuszon az LDA Gibbs módszert alkalmazzuk. A szövegelkészít és tisztító lépések ennél a módszernél is ugyanazok mint a fentebb bemutatott VEM módszer esetében, így itt most csak a modell illesztését mutatjuk be. gibbs_98_02 &lt;- LDA(dfm_98_02, k = 10, method = &quot;Gibbs&quot;, control = list(seed = 1234)) gibbs_02_06 &lt;- LDA(dfm_02_06, k = 10, method = &quot;Gibbs&quot;, control = list(seed = 1234)) Itt is elvégezzük a topikok tidy formátumra alakítását. topics_g98_02 &lt;- tidy(gibbs_98_02, matrix = &quot;beta&quot;) %&gt;% mutate(electoral_cycle = &quot;1998-2002&quot;) topics_g02_06 &lt;- tidy(gibbs_02_06, matrix = &quot;beta&quot;) %&gt;% mutate(electoral_cycle = &quot;2002-2006&quot;) lda_gibbs &lt;- bind_rows(topics_g98_02, topics_g02_06) Majd listázzuk az egyes topikokhoz tartozó leggyakoribb kifejezéseket. top_terms_gibbs &lt;- lda_gibbs %&gt;% group_by(electoral_cycle, topic) %&gt;% top_n(5, beta) %&gt;% top_n(5, term) %&gt;% ungroup() %&gt;% arrange(topic, -beta) Majd a ggplot2 csomag segítségével ábrán is megjeleníthetjük. top_terms_gibbs %&gt;% filter(electoral_cycle == &quot;1998-2002&quot;) %&gt;% ggplot(aes(reorder_within(term, beta, topic), beta)) + geom_col(show.legend = FALSE) + facet_wrap(~topic, scales = &quot;free&quot;, ncol = 2) + coord_flip() + labs( title = , x = NULL, y = expression(beta) ) + tidytext::scale_x_reordered() Figure 7.6: 1998-2002 ciklus topikok és kifejezések (Gibbs mintavétellel) top_terms_gibbs %&gt;% filter(electoral_cycle == &quot;2002-2006&quot;) %&gt;% ggplot(aes(reorder_within(term, beta, topic), beta)) + geom_col(show.legend = FALSE) + facet_wrap(~topic, scales = &quot;free&quot;, ncol = 2) + coord_flip() + labs( x = NULL, y = expression(beta) ) + scale_x_reordered() Figure 7.7: 2002-2006 ciklus topikok és kifejezések (Gibbs mintavétellel) 7.3 Struktúrális topik modellek A kvantitatív szövegelemzés elterjedésével együtt megjelentek a módszertani innovációk is és a probabilisztikus topic modellek esetében ez a politikatudomány területérl érkezett. Roberts et al. (2014) egy kiváló cikkben mutatta be a struktúrális topic modelleket (structural topic models, stm) ahol a f újítás az az hogy a dokumentumok metaadatai kovariánsként tudják befolyásolni hogy egy-egy kifejezés mekkora valószínséggel lesz egy-egy téma része. A kovariánsok egyrészrl megmagyarázhatják hogy egy-egy dokumentum mennyire függ össze egy-egy témával (topical prevalence), illetve hogy egy-egy szó mennyire függ össze egy-egy témán belül (topical content). Az stm modell becslése során mindkét típusú kovariánst használhatjuk, illetve hogyha nem adunk meg dokumentum meta adatot akkor az stm csomag stm függvénye a Korrelált Topic Modell-t fogja becsülni. Az stm modelleket az R-ben az stm csomaggal tudjuk kivitelezni. A csomag fejleszti között van a módszer kidolgozója is, ami nem ritka az R csomagok esetében. A lenti lépésekben a csomag dokumentációjában szerepl ajánlásokat követjük, habár a könyv írásakor a stm már képes volt a quanteda-ban létrehozott dfm-ek kezelésére is. A kiinduló adatbázisunk a törvény_final amit a fejezet elején hoztunk létre a dokumentumokból és a metaadatokból. A javasolt munkafolyamat a textProcessor()-használatával indul, ami szintén tartalmazza az alap szöveg elkészítési lépéseket. Az egyszerség és futási sebesség érdekében itt most ezek többségétl eltekintünk, mivel a fejezet korábbi részeiben részletesen tárgyaltuk ket. Az elkészítés utolsó szakaszában az out objektumban tároljuk el a dokumentumokat, egyedi szavakat, illetve a meta adatokat (kovariánsokat). data_stm &lt;- torveny_final processed_stm &lt;- textProcessor( torveny_final$text, metadata = torveny_final, lowercase = FALSE, removestopwords = FALSE, removenumbers = FALSE, removepunctuation = FALSE, ucp = FALSE, stem = TRUE, language = &quot;hungarian&quot;, verbose = FALSE ) out &lt;- prepDocuments(processed_stm$documents, processed_stm$vocab, processed_stm$meta) A struktúrális topic modellünket az stm függvénnyel becsüljük és a kovariánsokat a prevalence opciónál tudjuk formulaként megadni. A lenti példában a Comparative Agendas Projekt kategóriáit (pl.: gazdaság, egészségügy, stb.) és a kormányciklusokat használjuk. A futási id kicsit hosszabb mint az LDA modellek esetében. stm_fit &lt;- stm( out$documents, out$vocab, K = 10, prevalence = ~ majortopic + electoral_cycle, data = out$meta, init.type = &quot;Spectral&quot;, seed = 1234, verbose = FALSE ) Amennyiben a kutatási kérdés megkívánja, akkor megvizsálhatjuk hogy a kategórikus változóinknak milyen hatása volt egyes topikok esetében. Ehhez az estimateEffect() függvénnyel lefuttatunk egy lineáris regressziót és a summary() használatával láthatjuk az egyes kovariánsok koefficienseit. Itt az els topikkal illusztráljuk az eredményt, ami azt mutatja hogy (a kategórikus változóink els kategoriájához mérten) statisztikailag szignifikáns mint a téma mind pedig a kormányzati ciklusok abban hogy egyes dokumentumok milyen témákból épülnek fel. out$meta$electoral_cycle &lt;- as.factor(out$meta$electoral_cycle) out$meta$majortopic &lt;- as.factor(out$meta$majortopic) cov_estimate &lt;- estimateEffect(1:10 ~ majortopic + electoral_cycle, stm_fit, meta = out$meta, uncertainty = &quot;Global&quot;) summary(cov_estimate, topics = 1) #&gt; #&gt; Call: #&gt; estimateEffect(formula = 1:10 ~ majortopic + electoral_cycle, #&gt; stmobj = stm_fit, metadata = out$meta, uncertainty = &quot;Global&quot;) #&gt; #&gt; #&gt; Topic 1: #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 0.30118 0.03083 9.770 &lt; 2e-16 *** #&gt; majortopic2 -0.20953 0.06474 -3.237 0.001249 ** #&gt; majortopic3 -0.19942 0.05950 -3.352 0.000833 *** #&gt; majortopic4 -0.21489 0.05733 -3.749 0.000188 *** #&gt; majortopic5 0.10192 0.04651 2.191 0.028674 * #&gt; majortopic6 -0.21813 0.05763 -3.785 0.000163 *** #&gt; majortopic7 -0.15750 0.06746 -2.335 0.019745 * #&gt; majortopic8 -0.20311 0.07402 -2.744 0.006177 ** #&gt; majortopic9 0.49074 0.10776 4.554 5.91e-06 *** #&gt; majortopic10 -0.11412 0.05360 -2.129 0.033508 * #&gt; majortopic12 -0.17535 0.04068 -4.311 1.79e-05 *** #&gt; majortopic13 -0.14383 0.05538 -2.597 0.009540 ** #&gt; majortopic14 -0.21523 0.07339 -2.933 0.003435 ** #&gt; majortopic15 -0.14833 0.04171 -3.556 0.000393 *** #&gt; majortopic16 -0.09580 0.05444 -1.760 0.078762 . #&gt; majortopic17 -0.22235 0.05728 -3.882 0.000110 *** #&gt; majortopic18 0.21233 0.05565 3.816 0.000144 *** #&gt; majortopic19 0.06358 0.04853 1.310 0.190472 #&gt; majortopic20 -0.21211 0.03944 -5.378 9.37e-08 *** #&gt; majortopic21 -0.21810 0.06868 -3.176 0.001541 ** #&gt; majortopic23 -0.19028 0.09082 -2.095 0.036404 * #&gt; electoral_cycle2002-2006 -0.10232 0.01946 -5.257 1.78e-07 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Az LDA modelleknél már bemutatott munkafolyamat az stm modellünk esetében is alkalmazható, hogy vizuálisan is megjelenítsük az eredményeinket. A tidy() data frammé alakítja az stm objektumot, amit aztán a már ismers dplyr csomagban lév függvényekkel tudunk átalakítani és végül vizualizálni a ggplot2 csomaggal. A lenti ábrán az egyes témákhoz tartozó 5 legvalószínbb szót mutatjuk be. tidy_stm &lt;- tidy(stm_fit) tidy_stm %&gt;% group_by(topic) %&gt;% top_n(5, beta) %&gt;% ungroup() %&gt;% mutate( topic = paste0(&quot;Topic &quot;, topic), term = reorder_within(term, beta, topic) ) %&gt;% ggplot(aes(term, beta)) + geom_col() + facet_wrap(~topic, scales = &quot;free_y&quot;, ncol = 3) + coord_flip() + scale_x_reordered() + labs( x = NULL, y = expression(beta) ) Figure 7.8: Topikonkénti legmagasabb valószínuségu szavak Egy-egy topichoz tartozó meghatározó szavak annak függvényében változhatnak hogy milyen algoritmust használunk. A labelTopics() a már becsült stm modellünket alapul véve kínál 4 féle alternatív opciót. Az egyes algoritmusok részletes magyarázatáért érdemes elolvasni a csomag részletes leírását.20 labelTopics(stm_fit, c(1:2)) #&gt; Topic 1 Top Words: #&gt; Highest Prob: szerzodo, vagi, egyezméni, fél, államban, nem, másik #&gt; FREX: megadóztatható, haszonhúzója, beruházóinak, segélycsapatok, adóztatást, jövedelemadók, kijelölések #&gt; Lift: árucikkeket, átalányösszegben, átléphetik, átszállítást, beruházóikat, célországban, cikktanulók #&gt; Score: szerzodo, államban, illetoségu, egyezméni, megadóztatható, adóztatható, cikka #&gt; Topic 2 Top Words: #&gt; Highest Prob: muködési, célú, támogatások, költségvetésegyéb, felhalmozási, terhelo, beruházási #&gt; FREX: kiadásokfelújításegyéb, kiadásokintézményi, kiadásokközponti, költségvetésfelhalmozási, kiadásokkormányzati, felújításegyéb, rek #&gt; Lift: a+b+c, a+b+c+d, adago, adódóa, adósságállományából, adósságrendezésr, adótartozásának #&gt; Score: költségvetésegyéb, költségvetésszemélyi, kiadásokfelhalmozási, járulékokdolog, költségvetésintézményi, kiadásokegyéb, juttatásokmunkaadókat A korpuszunkon belüli témák megoszlását a plot.STM()-el tudjuk ábrázolni. Jól látszik hogy a Topic 6-ba tartozó szavak vannak jelen a legnagyobb arányban a dokumentumaink között. plot.STM(stm_fit, &quot;summary&quot;, main = &quot;&quot;, labeltype = &quot;frex&quot;, xlab = &quot;Várható topic arányok&quot;) Figure 7.9: Leggyakoribb témák és kifejezések Végezetül, a témák közötti korrelációt a topicCorr függvénnyel becsülhetjük és az igraph csomagot betöltve a plot() paranccsal tudjuk vizualizálni. Az eredmény egy hálózat lesz amit gráfként ábrázolunk. Az élei a gráfoknak a témák közötti összefüggést (korrelációt) jelölik. plot(topicCorr(stm_fit)) Figure 7.10: Témák közötti korreláció hálózat a kód részben az alábbiakon alapul: tidytextmining.com/topicmodeling.html Az általunk is használt topicmodels csomag interfészt biztosít az LDA modellek és a korrelált témamodellek (CTM) C kódjához, valamint az LDA modellek illesztéséhez szükséges C ++ kódhoz. A teljes törvényeket és a meta adatokat tartalmazó adatbázisokat a https://cap.tk.hu/ honlapról lehet letölteni. http://brooksandrew.github.io/simpleblog/articles/latent-dirichlet-allocation-under-the-hood/ A ldatuning R csomagban további indikátor implementációja található, ami a perplexityhez hasonlóan minimalizásra alapoz (Arun et al. 2010; Cao et al. 2009), illetve maximalizálásra (Deveaud, SanJuan, and Bellot 2014; Griffiths and Steyvers 2004) a tidy formátumról bvebben: https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html Az stm csomaghoz tartozó leírás: https://cran.r-project.org/web/packages/stm/vignettes/stmVignette.pdf "],["szóbeágyazások.html", "8 Szóbeágyazások 8.1 Word2Vec, GloVe és fastText", " 8 Szóbeágyazások Az eddigi fejezetekben elssorban a szózsák (bag of words) alapú módszerek voltak eltérben. Ez a reprezentálása a szövegnek szigorúan véve nem felel meg a valóságnak a kontextuális tartalom elvesztése miatt, de ezt az esetek többségében figyelmen kívül hagyhatjuk. A szóbeágyazáson (word embedding) alapuló modellek viszont kimondottan a kontextuális információt ragadják meg. A szóbeágyazás a topikmodellekhez hasonlóan szintén a felügyelet nélküli tanulás módszerére épül, azonban itt a dokumentum domináns kifejezéseinek és témáinak feltárása helyett a szavak közötti szemantikai kapcsolat megértése a cél. Vagyis a modellnek képesnek kell lennie az egyes szavak esetén szinonimáik, és ellentétpárjaik megtalálására. A hagyományos topikmodellezés esetén a modell a szavak dokumentumokon belüli együttes megjelenési statisztikái alapján becsül dokumentum-topik, illetve topik-szó eloszlásokat, azzal a céllal, hogy koherens téma-csoportokat képezzen a modell, ezzel szemben a szóbeágyazás legújabb iskolája már neurális halókon alapul. A neurális háló a tanítási folyamata során az egyes szavak vektorreprezentációját állítja el. A vektorok jellemzen 100-300 dimenzióból állnak, a távolságuk alapján pedig megállapítható, hogy az egyes kifejezések milyen szemantikai kapcsolatban állnak egymással. A szóbeágyazás célja tehát a szemantikai relációk feltárása. A szavak vektorizálásának köszönheten bármely (a korpuszunkban szerepl) tetszleges számú szóról eldönthetjük, hogy azok milyen szemantikai kapcsolatban állnak egymással  szinonimaként, vagy ellentétes fogalompárként szerepelnek. A szóvektorokon dimenziócsökkent eljárást alkalmazva, s a multidimenzionális (100-300 dimenziós) teret 2 dimenziósra szkítve könnyen vizualizálhatjuk is a korpuszunk kifejezései között fennálló szemantikai távolságot, és ahogy a lenti ábrákon is, láthatjuk, hogy az egyes kifejezések milyen relációban állnak egymással  a szemantikailag hasanló tartalmú kifejezések egymáshoz közel, míg a távolabbi jelentéstartalmú kifejezések egymástól távolabb foglalnak helyet. A klasszikus példa, amivel jól lehet szemléltetni a szóvektorok közötti összefüggést: king - man + woman = queen 8.1 Word2Vec, GloVe és fastText A szóbeágyazásra társadalomtudományokban a két legnépszerbb algoritmus  Word2Vec és a GloVe  a kontextuális szövegeloszláson (distributional similarity based representations) alapszik, vagyis abból a feltevésbl indul ki, hogy a hasonló kifejezések hasonló kontextusban fordulnak el, valamint mindkett sekély neurális hálón (2 rejtett réteg) alapuló modell.21 A Word2Vec-nek két verziója van: Continuous Bag-of-words (CBOW) és SkipGram (SG)  elbbi a kontextuális szavakból jelzi elre (predicting) a kontextushoz legszorosabban kapcsolódó kifejezést, míg utóbbi adott kifejezésbl jelzi elre a kontextust Mikolov et al. (2013). A GloVe (Global Vectors for Word Representation) a Word2Vec-hez hasonlóan neurális hálón alapuló, szóvektorok elállítását célzó modell, a Word2Vec-kel szemben azonban nem a meghatározott kontextus-ablakban (context window) megjelen kifejezések közti kapcsolatokat tárja fel, hanem a szöveg globális jellemzit igyekszik megragadni az egész szöveget jellemz együttes elfordulási gyakoriságok (co-occurrance) meghatározásával Pennington, Socher, and Manning (2014). Míg a Word2Vec modell prediktív jelleg, addig a GloVe egy statisztikai alapú (count-based) modell, melyek gyakorlati hasznosításukat tekintve nagyon hasonlóak. A szóvektor modellek között érdemes megemlíteni a fastText-et is, mely 157 nyelvre kínál (köztük magyarra is) a szóbeágyazás módszeren alapuló, elre tanított szóvektorokat, melyet tovább lehet tanítani speciális szövegkorpuszokra, ezzel jelentsen lerövidítve a modell tanításához szükséges id-, és kapacitásszükségletet Mikolov et al. (2018). Habár a GloVe és Word2Vec skip-gram módszerek hasonlóságát a szakirodalom adottnak veszi, a tényleges kép ennél árnyaltabb. A GloVe esetében a ritkán elforduló szavak kisebb súlyt kapnak a szóvektorok számításánál, míg a Word2Vec alulsúlyozza a nagy frekvenciájú szavakat. Ennek a következménye, hogy a Word2Vec esetében gyakori hogy a szemantikailag legközelebbi szó az egy elütés, nem pedig valid találat. Ennek ellenére a két módszer (amennyiben a Word2Vec algoritmusnál a kisfrekvenciájú tokeneket kiszrjük) az emberi validálás során nagyon hasonló eredményeket hozott (Spirling and Rodriguez Forthcoming). A fejezetben a gyakorlati példa során a GloVe algoritmust használjuk majd, mivel véleményünk szerint az implementációt tartalmazó R csomagnak jobb a dokumentációja mint a többi alternatívának. 8.1.1 GloVe használata magyar média korpuszon Az elemzéshez a text2vec csomagot fogjuk használni, ami a GloVe implementációt tartalmazza. A lenti kód a csomag dokumentáción alapul és a Társadalomtudományi Kutatóközpont által a Hungarian Comparative Agendas Project (CAP) adatbázisában tárolt Magyar Nemzet korpuszt használja.22 library(text2vec) library(quanteda) library(readtext) library(readr) library(dplyr) library(tibble) library(stringr) A lenti kód blokk azt mutatja be, hogy hogyan kell a betöltött korpuszt tokenizálni és mátrix formátumba alakítani. A korpusz az a Magyar Nemzet 2004 és 2014 közötti címlapos cikkeit tartalmazza. Az eddigi elkészít lépéseket most is megtesszük: kitöröljük a központozást, számokat, magyar töltelékszavakat, illetve kisbetsítünk és eltávolítjuk a felesleges szóközöket és tördeléseket. mn &lt;- read_csv(&quot;data/mn_large.csv&quot;) mn_clean &lt;- mn %&gt;% mutate( text = str_remove_all(string = text, pattern = &quot;[:cntrl:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:punct:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:digit:]&quot;), text = str_to_lower(text), text = str_trim(text), text = str_squish(text) ) Fontos különbség hogy az eddigi munkafolyamatokkal ellentétben a GloVe algoritmus nem egy dokumentum-kifejezés mátrixon dolgozik, hanem egy kifejezések együttes elfordulását tartalmazó mátrixot (feature co-occurence matrix) kell készíteni inputként. Ezt a quanteda fcm() függvényével tudjuk elállítani, ami a tokenekbl készíti el a mátrixot. A tokenek sorrendiségét úgy tudjuk megrizni, hogy egy dfm objektumból csak a kifejezéseket tartjuk meg a featnames() függvény segítségével, majd a teljes token halmazból a tokens_select() függvénnyel kiválasztjuk ket. mn_corpus &lt;- corpus(mn_clean) mn_tokens &lt;- tokens(mn_corpus) %&gt;% tokens_remove(stopwords(language = &quot;hungarian&quot;)) features &lt;- dfm(mn_tokens) %&gt;% dfm_trim(min_termfreq = 5) %&gt;% featnames() mn_tokens &lt;- tokens_select(mn_tokens, features, padding = TRUE) Az fcm megalkotása során a célkifejezéstl való távolság függvényében súlyozzuk a tokeneket. mn_fcm &lt;- fcm(mn_tokens, context = &quot;window&quot;, count = &quot;weighted&quot;, weights = 1/(1:5), tri = TRUE) A tényleges szóbeágyazás a text2vec csomaggal történik. A GlobalVector egy új környezetet (environment) hoz létre. Itt adhatjuk meg az alapvet paramétereket. A rank a vektor dimenziót adja meg (az irodalomban a 300-500 dimenzió a megszokott). A többi paraméterrel is lehet kísérletezni, hogy mennyire változtatja meg a kapott szóbeágyazásokat. A fit_transform pedig a tényleges becslést végzi. Itt az iterációk számát (a gépi tanulásos irodalomban epoch-nak is hívják a tanulási köröket) és a korai leállás (early stopping) kritériumát a convergence_tol megadásával. Minél több dimenziót szeretnénk és minél több iterációt, annál tovább fog tartani a szóbeágyazás futtatása. Az egyszerség és gyorsaság miatt a lenti kód 10 körös tanulást ad meg, ami a relatíve kicsi Magyar Nemzet korpuszon ~3 perc alatt fut le.23 Természetesen minél nagyobb korpuszon, minél több iterációt futtatunk, annál pontosabb eredményt fogunk kapni. A text2vec csomag képes a számítások párhuzamosítására, így alapbeállításként a rendelkezésre álló összes CPU magot teljesen kihasználja a számításhoz. Ennek ellenére egy százezres, milliós korpusz esetén több óra is lehet a tanítás. glove &lt;- GlobalVectors$new(rank = 300, x_max = 10, learning_rate = 0.1) mn_main &lt;- glove$fit_transform(mn_fcm, n_iter = 10, convergence_tol = 0.01) A végleges szóvektorokat a becslés során elkészült két mátrix összegeként kapjuk. mn_context &lt;- glove$components mn_word_vectors &lt;- mn_main + t(mn_context) # saveRDS(mn_word_vectors, &quot;data/temp/mn_word_vector.RDS&quot;) mn_word_vectors &lt;- readRDS(&quot;data/temp/mn_word_vector.RDS&quot;) Az egyes szavakhoz legközelebb álló szavakat a koszinusz hasonlóság alapján kapjuk, a sim2() függvénnyel. A lenti példában l2 normalizálást alkalmazunk, majd a kapott hasonlósági vektort csökken sorrendbe rendezzük. Példaként a polgármester szónak a környezetét nézzük meg. Mivel a korpuszunk egy politikai napilap, ezért nem meglep, hogy a legközelebbi szavak a politikához kapcsolódnak. teszt &lt;- mn_word_vectors[&quot;polgármester&quot;, , drop = F] cos_sim_rom &lt;- sim2(x = mn_word_vectors, y = teszt, method = &quot;cosine&quot;, norm = &quot;l2&quot;) head(sort(cos_sim_rom[, 1], decreasing = TRUE), 5) #&gt; polgármester mszps szocialista fideszes elmondta #&gt; 1.0000000 0.5059529 0.4339177 0.4204766 0.4024232 A lenti show_vector() függvényt definiálva a kapott eredmény egy data frame lesz, és az n változtatásával a kapcsolódó szavak számát is könnyen változtathatjuk. show_vector &lt;- function(vectors, pattern, n = 5) { term &lt;- mn_word_vectors[pattern, , drop = F] cos_sim &lt;- sim2(x = vectors, y = term, method = &quot;cosine&quot;, norm = &quot;l2&quot;) cos_sim_head &lt;- head(sort(cos_sim[, 1], decreasing = TRUE), n) output &lt;- enframe(cos_sim_head, name = &quot;term&quot;, value = &quot;dist&quot;) return(output) } Példaként a barack nem gyümölcsöket fog adni, hanem az Egyesült Államok elnökét és hozzá kapcsolódó szavakat. show_vector(mn_word_vectors, &quot;barack&quot;, 10) #&gt; # A tibble: 10 x 2 #&gt; term dist #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 barack 1.00 #&gt; 2 obama 0.691 #&gt; 3 elnök 0.372 #&gt; 4 amerikai 0.349 #&gt; 5 demokrata 0.339 #&gt; 6 republikánus 0.294 #&gt; 7 részesülhessenek 0.256 #&gt; 8 egyesült 0.253 #&gt; 9 elnököt 0.251 #&gt; 10 bush 0.239 Ugyanez mködik magyar vezetkkel is. show_vector(mn_word_vectors, &quot;orbán&quot;, 10) #&gt; # A tibble: 10 x 2 #&gt; term dist #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 orbán 1.00 #&gt; 2 viktor 0.937 #&gt; 3 miniszterelnök 0.743 #&gt; 4 mondta 0.701 #&gt; 5 jelentette 0.673 #&gt; 6 kormányfo 0.667 #&gt; 7 fogalmazott 0.661 #&gt; 8 fidesz 0.656 #&gt; 9 hangsúlyozta 0.655 #&gt; 10 beszélt 0.624 Egy kiváló tanulmányban Spirling and Rodriguez (Forthcoming) összehasonlítják a Word2Vec és GloVe módszereket, különböz paraméterekkel, adatbázisokkal. Amennyiben valakit komolyabban érdekelnek a szóbeágyazás gyakorlati alkalmazásának a részletei annak mindenképp ajánljuk elolvasásra. A Magyar CAP Projekt által kezelt adatbázisok itt megtalálhatóak: https://cap.tk.hu/adatbazisok A futtatásra használt PC nem különösebben ers: 4 magos Intel Core i5-4460 (3.2GHz) CPU és 16GB RAM "],["szövegskálázás-felügyelet-nélküli-és-felügyelt-megoldások.html", "9 Szövegskálázás: felügyelet nélküli és felügyelt megoldások 9.1 Wordfish 9.2 Wordscores", " 9 Szövegskálázás: felügyelet nélküli és felügyelt megoldások A szövegskálázás célja a politikai szereplk elhelyezése az ideológiai térben. Ennek felügyelt típusa a wordscores, amely a szótári módszerekhez hasonlóan a szereplket szavaik alapján helyezi el a politikai térben, úgy hogy az ún.referencia dokumentumok szövegét használja tanító halmazként. A wordscores kiindulópontja, hogy pozíció pontszámokat kell rendelni referencia szövegekhez. A modell számításba veszi szövegek szavainak súlyozott gyakoriságát és a pozíciópontszám valamint a szógyakoriság alapján becsülni meg a korpuszban lév többi dokumentum pozícióját. (Laver, Benoit, and Garry 2003). A felügyelet nélküli wordfish módszer a skálázás során nem a referencia dokumentumokra támaszkodik, hanem olyan kifejezéseket keres a szövegben, amelyek megkülönböztetik egymástól a politikai spektrum különböz pontjain elhelyezked beszélket. Az IRT-n (item response theory) alapuló módszer azt feltételezi, hogy a politikusok egy kevés dimenziós politikai térben mozognak, amely tér leírható az i politikus \\(\\theta_1\\) paraméterével. Egy politikus (vagy párt) ezen a téren elfoglalt helyzete pedig befolyásolja a szavak szövegekben történ használatát. A módszer erssége, hogy kevés erforrás-befektetéssel megbízható becsléseket ad, ha a szövegek valóban az ideológiák mentén különböznek, tehát ha a szereplk ersen ideológiai tartalamú diskurzust folytatnak. Alkalmazásakor azonban tudnunk kell, hogy a módszer nem képes kezelni, hogy a szövegek között nem csak ideológiai különbség lehet. Mivel a modell nem felügyelt, ezért nehéz garantálni, hogy valóban megbízhatóan azonosítja a szereplk elhelyezkedését a politikai térben, így az eredményeket mindenképpen körültekinten kell validálni. (Slapin and Proksch 2008; Hjorth et al. 2015; Grimmer and Stewart 2013) library(readr) library(dplyr) library(stringr) library(ggplot2) library(quanteda) library(quanteda.textmodels) A skálázási algoritmusokat egy kicsi korpuszon fogjuk bemutatni. A minta dokumentumok a 2014-2018 parlamenti ciklusban frakcióvezet politikusok egy-egy véletlenszeren kiválasztott napirend eltti felszólalásai. Ebben a ciklusban összesen 11 frakcióvezetje volt a két kormánypárti és öt ellenzéki frakciónak.24 A dokumentumokon a rutin elkészítési lépéseket végezzük csak el (tördelések, számok, központozás kitörlése, kisbetsítés). Természetesen minél alaposabbak vagyunk a szövegek tisztításával, annál pontosabb végeredményt fogunk kapni. parl_beszedek &lt;- read_csv(&quot;data/ps_sample.csv&quot;) beszedek_tiszta &lt;- parl_beszedek %&gt;% mutate( text = str_remove_all(string = text, pattern = &quot;[:cntrl:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:punct:]&quot;), text = str_remove_all(string = text, pattern = &quot;[:digit:]&quot;), text = str_to_lower(text), text = str_trim(text), text = str_squish(text) ) A Wordfish és Wordscores algoritmus is ugyanazt a kiinduló corpus és dfm objektumot fogja használni, amit a szokásos módon a quanteda csomag corpus() függvényével hozunk létre. A leíró statisztikai táblázatban látszik, hogy a beszédek hosszúsága nem egységes, a leghosszabb 10267 szavas, a legrövidebb pedig 1976. Az átlagos dokumentum hossz az 5136. A korpusz szemléltet célú, az eddig megszokott módon minél több/hosszabb dokumentummal dolgozunk, annál könnyebb dolga van az algoritmusoknak. beszedek_corpus &lt;- corpus(beszedek_tiszta) summary(beszedek_corpus) #&gt; Corpus consisting of 10 documents, showing 10 documents: #&gt; #&gt; Text Types Tokens Sentences id #&gt; text1 442 819 1 20142018_024_0002_0002 #&gt; text2 354 607 1 20142018_055_0002_0002 #&gt; text3 426 736 1 20142018_064_0002_0002 #&gt; text4 314 538 1 20142018_115_0002_0002 #&gt; text5 354 589 1 20142018_158_0002_0002 #&gt; text6 333 538 1 20142018_172_0002_0002 #&gt; text7 344 559 1 20142018_206_0002_0002 #&gt; text8 352 628 1 20142018_212_0002_0002 #&gt; text9 317 492 1 20142018_236_0002_0002 #&gt; text10 343 600 1 20142018_249_0002_0002 #&gt; felszolalo part #&gt; Vona Gábor (Jobbik) Jobbik #&gt; Dr. Schiffer András (LMP) LMP #&gt; Dr. Szél Bernadett (LMP) LMP #&gt; Tóbiás József (MSZP) MSZP #&gt; Schmuck Erzsébet (LMP) LMP #&gt; Dr. Tóth Bertalan (MSZP) MSZP #&gt; Volner János (Jobbik) Jobbik #&gt; Kósa Lajos (Fidesz) Fidesz #&gt; Harrach Péter (KDNP) KDNP #&gt; Dr. Gulyás Gergely (Fidesz) Fidesz Végezetül elkészítjük a dfm mátrixot és a magyar stopszavakat kitöröljük. beszedek_dfm &lt;- beszedek_corpus %&gt;% tokens() %&gt;% tokens_remove(stopwords(&quot;hungarian&quot;)) %&gt;% dfm() 9.1 Wordfish A wordfish felügyelet nélküli skálázást a quanteda_textmodels csomagban implementált textmodel_wordfish() függvény fogja végezni. A megadott dir = c(1, 2) paraméterrel a két dokumentum relatív \\(\\theta\\) értékét tudjuk rögzíteni, mégpedig úgy hogy \\(\\theta_{dir1} &lt; \\theta_{dir2}\\). Alapbeállításként az els és utolsó dokumentumot teszi ide be az algoritmus. A lenti példánál mi a pártpozíciók alapján a Jobbikos Vona Gábor és az LMP-s Schiffer András egy-egy beszédét használtuk. A summary() használható az illesztett modellel, és a dokumentumonkénti \\(\\theta\\) koefficienst tudjuk így megnézni. beszedek_wf &lt;- textmodel_wordfish(beszedek_dfm, dir = c(2, 1)) summary(beszedek_wf) #&gt; #&gt; Call: #&gt; textmodel_wordfish.dfm(x = beszedek_dfm, dir = c(2, 1)) #&gt; #&gt; Estimated Document Positions: #&gt; theta se #&gt; text1 1.79474 0.04219 #&gt; text2 0.08931 0.04001 #&gt; text3 1.00137 0.03908 #&gt; text4 -0.09988 0.04232 #&gt; text5 0.73596 0.04355 #&gt; text6 0.18572 0.04452 #&gt; text7 -0.72832 0.03590 #&gt; text8 -0.80587 0.03358 #&gt; text9 -0.52028 0.04005 #&gt; text10 -1.65273 0.03794 #&gt; #&gt; Estimated Feature Scores: #&gt; vona gábor jobbik tisztelt elnök úr országgyulés tegnapi #&gt; beta 3.675 2.321 1.9710 0.2391 -0.11149 0.02755 1.2286 4.372 #&gt; psi -4.980 -2.734 -0.7531 0.4566 -0.05693 0.28721 -0.6705 -5.314 #&gt; napon helyen tartottak idoközi önkormányzati választásokat két #&gt; beta 2.991 3.103 3.675 3.675 3.675 3.675 1.1894 #&gt; psi -3.009 -2.630 -4.980 -4.980 -4.980 -4.980 -0.9439 #&gt; érdekelt recsken ózdon október nyertünk örömmel közlöm ország #&gt; beta 3.675 4.372 4.774 3.405 3.675 3.675 3.675 1.7470 #&gt; psi -4.980 -5.314 -5.545 -3.230 -4.980 -4.980 -4.980 -0.3643 #&gt; közvéleményével amúgy is tudnak mindkét jobbikos polgármester #&gt; beta 3.675 3.675 0.9128 1.433 3.675 3.675 3.675 #&gt; psi -4.980 -4.980 1.8345 -1.737 -4.980 -4.980 -4.980 Amennyiben szeretnénk a szavak szintjén is megnézni a \\(\\beta\\) (a szavakhoz társított súly, ami a relatív fontosságát mutatja) és \\(\\psi\\) (a szó fix effekt, ami az eltér szófrekvencia kezeléséért felels) koefficiensekhez, akkor a beszedek_wf objektumban tárolt értékeket egy data frame-be tudjuk bemásolni. A dokumentumok hosszára és a szófrekvenciát figyelembe véve, a negatív \\(\\beta\\) érték szavakat gyakrabban használják a negatív \\(\\theta\\) koefficienssel rendelkez politikusok. szavak_wf &lt;- data.frame( word = beszedek_wf$features, beta = beszedek_wf$beta, psi = beszedek_wf$psi ) szavak_wf %&gt;% arrange(beta) %&gt;% head(n = 15) #&gt; word beta psi #&gt; 1 czeglédy -5.900663 -6.222629 #&gt; 2 csaba -5.769959 -6.151399 #&gt; 3 human -5.438681 -5.975155 #&gt; 4 operator -5.438681 -5.975155 #&gt; 5 zrt -5.216835 -5.860931 #&gt; 6 fizette -4.927204 -5.717002 #&gt; 7 gyanú -4.927204 -5.717002 #&gt; 8 szocialista -4.927204 -5.717002 #&gt; 9 elkövetett -4.509192 -5.521276 #&gt; 10 tárgya -4.509192 -5.521276 #&gt; 11 céghálózat -4.509192 -5.521276 #&gt; 12 diákok -4.509192 -5.521276 #&gt; 13 májusi -4.509192 -5.521276 #&gt; 14 júniusi -4.509192 -5.521276 #&gt; 15 büntetoeljárás -4.509192 -5.521276 Ez a pozitív értékekre is igaz. szavak_wf %&gt;% arrange(desc(beta)) %&gt;% head(n = 15) #&gt; word beta psi #&gt; 1 nemzetközi 5.057078 -5.720709 #&gt; 2 önöknek 4.977502 -4.778607 #&gt; 3 ózdon 4.773523 -5.544626 #&gt; 4 kétharmados 4.773523 -5.544626 #&gt; 5 igenis 4.773523 -5.544626 #&gt; 6 választási 4.773523 -5.544626 #&gt; 7 geopolitikai 4.773523 -5.544626 #&gt; 8 ártatlanság 4.773523 -5.544626 #&gt; 9 vélelme 4.773523 -5.544626 #&gt; 10 tegnapi 4.372320 -5.314088 #&gt; 11 recsken 4.372320 -5.314088 #&gt; 12 lássuk 4.372320 -5.314088 #&gt; 13 tolünk 4.372320 -5.314088 #&gt; 14 janiczak 4.372320 -5.314088 #&gt; 15 szavazattal 4.372320 -5.314088 Az eredményeinket mind a szavak és mind a dokumentumok szintjén tudjuk vizualizálni. Elsként a klasszikus Eiffel-torony ábrát reprodukáljuk, ami a szavak gyakorisága és skálára gyakorolt befolyásának az illusztrálására szolgál. Ehhez a már elkészült szavak_wf data framet és a ggplot2 csomagot fogjuk használni. Mivel a korpuszunk nagyon kicsi ezért csak 2410 kifejezést fogunk ábrázolni. Ennek ellenére a lényeg kirajzolódik a lenti ábrán is.25 Kihasználhatjuk, hogy a ggplot ábra definiálása közben a felhasznált bemeneti data frame-t különböz szempontok alapján lehet szrni. így ábrázolni tudjuk a gyakran használt ám semleges szavakat (magas \\(\\psi\\), alacsony \\(\\beta\\)), illetve a ritkább de meghatározóbb szavakat (magas \\(\\beta\\), alacsony \\(\\psi\\)). ggplot(szavak_wf, aes(x = beta, y = psi)) + geom_point(color = &quot;grey&quot;) + geom_text( data = filter(szavak_wf, beta &gt; 5 | beta &lt; -4.5 | psi &gt; 0), aes(beta, psi, label = word), alpha = 0.7 ) + labs( x = expression(beta), y = expression(psi) ) A dokumentumok szintjén is érdemes megvizsgálni az eredményeket. Ehhez a dokumentum szint paramétereket fogjuk egy data framebe gyjteni: a \\(\\theta\\) ideológiai pozíciót, illetve a beszél nevét. A vizualizáció kedvéért a párttagságot is hozzáadjuk. A data frame összerakása után az alsó és fels határát is kiszámoljuk a konfidencia intervallumnak és azt is ábrázoljuk. dokumentumok_wf &lt;- data.frame( speaker = beszedek_wf$x@docvars$felszolalo, part = beszedek_wf$x@docvars$part, theta = beszedek_wf$theta, theta_se = beszedek_wf$se.theta ) %&gt;% mutate( lower = theta - 1.96 * theta_se, upper = theta + 1.96 * theta_se ) ggplot(dokumentumok_wf, aes(theta, reorder(speaker, theta))) + geom_point() + geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0) + labs( y = NULL, x = expression(theta) ) A párt metaadattal összehasonlíthatjuk az egy párthoz tartozó frakcióvezetk értékeit a facet_wrap() használatával. Figyeljünk arra hogy az y tengelyen szabadon ggplot(dokumentumok_wf, aes(theta, reorder(speaker, theta))) + geom_point() + geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0) + labs( y = NULL, x = expression(theta) ) + facet_wrap(~part, ncol = 1, scales = &quot;free_y&quot;) 9.2 Wordscores A modell illesztést a wordfish-ez hasonlóan a quanteda.textmodels csomagban található textmodel_wordscores() függvény végzi. A kiinduló dfm ugyanaz mint amit a fejezet elején elkészítettünk, a beszedek_dfm. A referencia pontokat dokumentumváltozóként hozzáadjuk a dfm-hez a refrencia_pont oszlopot, ami NA értéket kap alapértelmezetten. A kiválasztott referencia dokumentumoknál pedig egyenként hozzáadjuk az értékeket. Erre több megoldás is van, az egyszerbb út, hogy az egyik és másik végletet a -1; 1 intervallummal jelöljük. Ennek a lehetséges alternatívája, hogy egy küls, már validált forrást használunk. Pártok esetén ilyen lehet a Chapel Hill szakérti kérdívének a pontszámai, a Manifesto projekt által kódolt jobb-bal (rile) dimenzió. A lenti példánál mi maradunk az egyszerbb bináris kódolásnál. A wordfish eredményt alapul véve a két referencia pont a Gulyás Gergely és Szél Bernadett beszédei lesznek.26 Ezek a 3. és 10. dokumentumok. docvars(beszedek_dfm, &quot;referencia_pont&quot;) &lt;- NA docvars(beszedek_dfm, &quot;referencia_pont&quot;)[3] &lt;- -1 docvars(beszedek_dfm, &quot;referencia_pont&quot;)[10] &lt;- 1 docvars(beszedek_dfm) #&gt; id felszolalo part #&gt; 1 20142018_024_0002_0002 Vona Gábor (Jobbik) Jobbik #&gt; 2 20142018_055_0002_0002 Dr. Schiffer András (LMP) LMP #&gt; 3 20142018_064_0002_0002 Dr. Szél Bernadett (LMP) LMP #&gt; 4 20142018_115_0002_0002 Tóbiás József (MSZP) MSZP #&gt; 5 20142018_158_0002_0002 Schmuck Erzsébet (LMP) LMP #&gt; 6 20142018_172_0002_0002 Dr. Tóth Bertalan (MSZP) MSZP #&gt; 7 20142018_206_0002_0002 Volner János (Jobbik) Jobbik #&gt; 8 20142018_212_0002_0002 Kósa Lajos (Fidesz) Fidesz #&gt; 9 20142018_236_0002_0002 Harrach Péter (KDNP) KDNP #&gt; 10 20142018_249_0002_0002 Dr. Gulyás Gergely (Fidesz) Fidesz #&gt; referencia_pont #&gt; 1 NA #&gt; 2 NA #&gt; 3 -1 #&gt; 4 NA #&gt; 5 NA #&gt; 6 NA #&gt; 7 NA #&gt; 8 NA #&gt; 9 NA #&gt; 10 1 A lenti wordscore modell specifikáció követi a Laver, Benoit, and Garry (2003) - ben leírtakat. beszedek_ws &lt;- textmodel_wordscores( x = beszedek_dfm, y = docvars(beszedek_dfm, &quot;referencia_pont&quot;), scale = &quot;linear&quot;, smooth = 0 ) summary(beszedek_ws, 10) #&gt; #&gt; Call: #&gt; textmodel_wordscores.dfm(x = beszedek_dfm, y = docvars(beszedek_dfm, #&gt; &quot;referencia_pont&quot;), scale = &quot;linear&quot;, smooth = 0) #&gt; #&gt; Reference Document Statistics: #&gt; score total min max mean median #&gt; text1 NA 486 0 18 0.2017 0 #&gt; text2 NA 395 0 12 0.1639 0 #&gt; text3 -1 439 0 12 0.1822 0 #&gt; text4 NA 330 0 7 0.1369 0 #&gt; text5 NA 360 0 8 0.1494 0 #&gt; text6 NA 328 0 5 0.1361 0 #&gt; text7 NA 349 0 5 0.1448 0 #&gt; text8 NA 387 0 10 0.1606 0 #&gt; text9 NA 307 0 13 0.1274 0 #&gt; text10 1 383 0 8 0.1589 0 #&gt; #&gt; Wordscores: #&gt; (showing first 10 elements) #&gt; tisztelt elnök úr országgyulés ország is #&gt; -0.07547 0.39255 0.06813 0.06813 -1.00000 -0.19859 #&gt; sot nemhogy tette fidesz #&gt; -1.00000 -1.00000 -1.00000 1.00000 Az illesztett wordscores modellünkkel ezek után már meg tudjuk becsülni a korpuszban lév többi dokumentum pozícióját. Ehhez az R beépített predict() megoldását használjuk. A kiegészít opciókkal a konfidencia intervallum alsó és fels határát is meg tudjuk becsülni, ami jól jön hogyha szeretnénk ábrázolni az eredményt. beszedek_ws_pred &lt;- predict( beszedek_ws, newdata = beszedek_dfm, interval = &quot;confidence&quot;) beszedek_ws_pred &lt;- as.data.frame(beszedek_ws_pred$fit) beszedek_ws_pred #&gt; fit lwr upr #&gt; text1 -0.489860579 -0.62138707 -0.35833409 #&gt; text2 -0.234609623 -0.39658117 -0.07263807 #&gt; text3 -0.909048451 -0.93507086 -0.88302605 #&gt; text4 -0.296528588 -0.47539855 -0.11765863 #&gt; text5 -0.259074418 -0.44948427 -0.06866457 #&gt; text6 0.006320468 -0.23056645 0.24320738 #&gt; text7 0.165042014 -0.06144022 0.39152425 #&gt; text8 -0.077739857 -0.27645536 0.12097565 #&gt; text9 -0.123985348 -0.31176579 0.06379509 #&gt; text10 0.909048451 0.87934394 0.93875296 A kapott modellünket a wordfishez hasonlóan tudjuk ábrázolni, miután a beszedek_ws_pred objektumból egy data framet csinálunk és a ggplot2-vel elkészítjük a vizualizációt. A dokumentumok_ws két részbl áll össze. Elször a wordscores modell objektumunkból a frakcióvezetk neveit és pártjaikat emeljük ki (kicsit körülményes a dolog mert egy komplexebb objektumban tárolja ket a quanteda, de az str() függvény tud segíteni ilyen esetekben). A dokumentumok becsült pontszámait pedig a beszedek_ws_pred objektumból készített data frame hozzácsatolásával tesszük meg. Ehhez a dplyr csomag bind_cols függvényét használjuk. Fontos, hogy itt teljesen biztosnak kell lennünk abban, hogy a sorok a két data frame esetében ugyanarra a dokumentumra vonatkoznak. dokumentumok_ws &lt;- data.frame( speaker = beszedek_ws$x@docvars$felszolalo, part = beszedek_ws$x@docvars$part ) dokumentumok_ws &lt;- bind_cols(dokumentumok_ws, beszedek_ws_pred) dokumentumok_ws #&gt; speaker part fit lwr upr #&gt; text1 Vona Gábor (Jobbik) Jobbik -0.489860579 -0.62138707 -0.35833409 #&gt; text2 Dr. Schiffer András (LMP) LMP -0.234609623 -0.39658117 -0.07263807 #&gt; text3 Dr. Szél Bernadett (LMP) LMP -0.909048451 -0.93507086 -0.88302605 #&gt; text4 Tóbiás József (MSZP) MSZP -0.296528588 -0.47539855 -0.11765863 #&gt; text5 Schmuck Erzsébet (LMP) LMP -0.259074418 -0.44948427 -0.06866457 #&gt; text6 Dr. Tóth Bertalan (MSZP) MSZP 0.006320468 -0.23056645 0.24320738 #&gt; text7 Volner János (Jobbik) Jobbik 0.165042014 -0.06144022 0.39152425 #&gt; text8 Kósa Lajos (Fidesz) Fidesz -0.077739857 -0.27645536 0.12097565 #&gt; text9 Harrach Péter (KDNP) KDNP -0.123985348 -0.31176579 0.06379509 #&gt; text10 Dr. Gulyás Gergely (Fidesz) Fidesz 0.909048451 0.87934394 0.93875296 A lenti példánál a párton belüli bontást illusztráljuk, a facet_wrap() segítségével. ggplot(dokumentumok_ws, aes(fit, reorder(speaker, fit))) + geom_point() + geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0) + labs( y = NULL, x = &quot;Wordscore&quot; ) + facet_wrap(~part, ncol = 1, scales = &quot;free_y&quot;) A mintába nem került be Rogán Antal, akinek csak egy darab napirend eltti felszólalása volt. A quanteda.textplots csomag több megoldást is kínál az ábrák elkészítésére. Mivel ezek a megoldások kifejezetten a quanteda elemzések ábrázolására készültek, ezért rövid egysoros függvényekkel tudunk gyorsan ábrákat készíteni. A hátrányuk, hogy kevésbé tudjuk személyre szabni az ábráinkat, mint a ggplot2 példák esetében. A quanteda.textplots megoldásokat ezen a linken demonstrálják a csomag készíti: https://quanteda.io/articles/pkgdown/examples/plotting.html Azért nem a Vona Gábor beszédét választottuk, mert az gyaníthatóan egy kiugró érték ami nem reprezentálja a sokaságot megfelelen. "],["szövegösszehasonlítás.html", "10 Szövegösszehasonlítás", " 10 Szövegösszehasonlítás tba "],["természetes-nyelv-feldolgozás-nlp.html", "11 Természetes-nyelv feldolgozás (NLP)", " 11 Természetes-nyelv feldolgozás (NLP) tizenegyedik fejezet "],["osztályozás-és-felügyelt-tanulás.html", "12 Osztályozás és felügyelt tanulás", " 12 Osztályozás és felügyelt tanulás tizenkeddik fejezet "],["függelék.html", "13 Függelék 13.1 Az R és az RStudio használata 13.2 Vizualizáció", " 13 Függelék 13.1 Az R és az RStudio használata Az R egy programozási nyelv, amely alkalmas statisztikai számítások elvégzésére és ezek eredményeinek grafikus megjelenítésére. Az R ingyenes, nyílt forráskódú szoftver, mely telepíthet mind Windows, mind Linux, mind MacOS operációs rendszerek alatt, az alábbi oldalról: https://cran.r-project.org/ Az RStudio az R integrált fejleszti környezete (integrated development environment, IDE), mely egy olyan felhasználóbarát felületet biztosít, ami egyszerbb és átláthatóbb munkát tesz lehetvé. Az RStudio az alábbi oldalról tölthet le: https://rstudio.com/products/rstudio/download/ A point and click\" szoftverekkel szemben az R használata során kódot kell írni, ami bizonyos programozási jártasságot feltételez, de a késbbiekben lehetvé teszi azt adott kutatási kérdéshez maximálisan illeszked kódok összeállítását, melyek segítségével az elemzések mások számára is megbízhatóan reprodukálhatók lesznek. Ugyancsak az R használata mellett szól, hogy komoly fejleszti és felhasználói közösséggel rendelkezik, így a használat során felmerül problémákra általában gyorsan megoldást találhatunk. 13.1.1 Az RStudio kezdfelülete Az RStudio kezdfelülete négy panelbl, eszközsorból és menüsorból áll: Figure 13.1: RStudio felhasználói felület Az (1) editor ablak szolgál a kód beírására, futtatására és mentésére. A (2) console ablakban jelenik meg a lefuttatott kód és az eredmények. A jobb fels ablak (3) environment fülén láthatóak a memóriában tárolt adatállományok, változók és felhasználói függvények. A history fül mutatja a korábban lefuttatott utasításokat. A jobb alsó ablak (4) files fülén az aktuális munkakönyvtárban lev mappákat és fájlok találjuk, míg a plot fülön az elemzéseink során elkészített ábrák jelennek meg. A packages fülön frissíthetjük a meglév r csomagokat és telepíthetünk újakat. A help fülön a különböz függvények, parancsok leírását, és használatát találjuk meg. A Tools -&gt; Global Options menüpont végezhetjük el az RStudio testreszabását. Így például beállíthatjuk az ablaktér elrendezését (Pane layout), vagy a színvilágot (Appearance), illetve azt hogy a kódok ne fussanak ki az ablakból (Code -&gt; Editing -&gt; Soft wrap R source files) 13.1.2 Projekt alapú munka Bár nem kötelez, de javasolt, hogy az RStudio-ban projekt alapon dolgozzunk, mivel így az összes  az adott projekttel kapcsolatos fájlt  egy mappában tárolhatjuk. Új projekt beállítását a File-&gt;New Project menüben tehetjük meg, ahol a saját gépünk egy könyvtárát kell kiválasztani, ahová az R scripteket, az adat- és elzményfájlokat menti. Ezenkívül a Tools-&gt;Global Options-&gt;General menüpont alatt le kell tiltani a Restore most recently opened project at startup és a Restore .RData ino workspace at startup beállítást, valamint Save workspace to .RData on exit értékre be kell állítani a Never értéket. Figure 13.2: RStudio projekt beállítások A szükséges beállítások után a File -&gt; New Project menüben hozhatjuk létre a projektet. Itt arra is lehetségünk van, hogy kiválasszuk, hogy a projektünket egy teljesen új könyvtárba, vagy egy meglévbe kívánjuk menteni, esetleg egy meglév projekt új verzióját szeretnénk létrehozni. Ha sikeresen létrehoztuk a projektet, az RStudio jobb fels sarkában látnunk kell annak nevét. 13.1.3 Scriptek szerkesztése, függvények használata Új script a File -&gt; New -&gt; File -&gt; R Script menüpontban hozható létre, mentésére a File-&gt;Save menüpontban egy korábbi script megnyitására File -&gt; Open menüpontban van lehetségünk. Script bármilyen szövegszerkesztvel írható és beilleszthet az editor ablakba. A scripteket érdemes magyarázatokkal (kommentekkel) ellátni, hogy a késbbiekben pontosan követhet legyen, hogy melyik parancs segítségével pontosan milyen lépéseket hajtottunk végre. A magyarázatokat vagy más néven kommenteket kettskereszt (#) karakterrel vezetjük be. A scriptbeli utasítások az azokat tartalmazó sorokra állva vagy több sort kijelölve a Run feliratra kattintva vagy a Ctrl+Enter billentyparanccsal futtathatók le. A lefuttatott parancsok és azok eredményei ezután a bal alsó sarokban lév console ablakban jelennek meg és ugyanitt kapunk hibaüzenetet is, ha valamilyen hibát vétettünk a scriptben. A munkafolyamat során létrehozott állományok (ábrák, fájlok) ebbe az ún. munkakönyvtárba (working directory) mentdnek. Az aktuális munkakönyvtár neve, elérési útja a getwd() utasítással jeleníthet meg. A könyvtárban található állományok listázására a list.files() utasítással van lehetségünk. Ha a korábbiaktól eltér munkakönyvtárat akarunk megadni, azt a setwd() függvénnyel tehetjük meg, ahol a ()-ben az adott mappa elérési útját kell megadnunk. Az elérési útban a meghajtó azonosítóját, majd a mappák, almappák nevét vagy egy normál irányú perjel (/), vagy két fordított perjel (\\\\) választja el, mivel az elérési út karakterlánc, ezért azt idézjelek vagy aposztrófok közé kell tennünk. Az aktuális munkakönyvtárba beléphetünk a jobb alsó ablak file lapján a More -&gt; Go To Working Directory segítségével. Ugyanitt a Set Working Directory-val munkakönyvtárnak állíthatjuk be az a mappát, amelyben épp benne vagyunk. Figure 13.3: Working directory beállítások A munkafolyamat befejezésére a q() vagy quit() függvénnyel van lehetségünk. A munkafolyamat során különböz objektumokat hozunk létre, melyek az RStudio jobb fels ablakának environment fülén jelennek meg, a mentett objektumokat a fent látható sepr ikonra kattintva törölhetjük a memóriából. Az environment ablakra érdemes úgy gondolni hogy ott jelennek meg a memóriában tárolt értékek. Az R-ben objektumokkal dolgozunk, amik a teljesség igénye nélkül lehetnek egyszer szám vektortok, vagy akár komplex listák, illetve függvények, ábrák. Az RStudio jobb alsó ablakának plots fülén láthatjuk azon parancsok eredményét, melyek kimenete valamilyen ábra. A packages fülnél a már telepített és a letölthet kiegészít csomagokat jeleníthetjük meg. A help fülön a korábban említettek szerint a súgó érhet el. Az RStudio-ban használható billentyparancsok teljes listáját Alt+Shift+K billentykombinációval tekinthetjük meg. Néhány gyakrabban használt, hasznos billentyparancs: Ctrl+Enter: futtassa a kódot az aktuális sorban Ctrl+Alt+B: futtassa a kódot az elejétl az aktuális sorig Ctrl+Alt+E: futtassa a kódot az aktuális sortól a forrásfájl végéig Ctrl+D: törölje az aktuális sort Az R-ben beépített függvények (function) állnak rendelkezésünkre a számítások végrehajtására, emellett több csomag (package) is letölthet, amelyek különböz függvényeket tartalmaznak. A függvények a következképpen épülnek fel: függvénynév(paraméter). Például tartalom képernyre való kiíratását a print() függvénnyel tehetjük, amelynek gömböly zárójelekkel határolt részébe írhatjuk a megjelenítend szöveget. A citation() függvénnyel lekérdezhetjük az egyes beépített csomagokra való hivatkozást is: a citation(quanteda) függvény a quanteda csomag hivatkozását adja meg. Az R súgórendszere a help.start() utasítással indítható el. Egy adott függvényre vonatkozó súgórészlet a függvények neve elé kérdjel írásával, vagy a help() argumentumába a kérdéses függvény nevének beírásával jeleníthet meg (pl.: help(sum)). 13.1.4 R csomagok Az R-ben telepíthetk kiegészít csomagok (packages), amelyek alapértelmezetten el nem érhet algoritmusokat, függvényeket tartalmaznak. A csomagok saját dokumentációval rendelkeznek, amelyeket fel kell tüntetni a használatukkal készült publikációink hivatkozáslistájában. A csomagok telepítésre több lehetségünk is van: használhatjuk a menüsor Tools -&gt; Install Packages menüpontját, vagy a jobb alsó ablak Packages fül Install menüpontját, illetve az editor ablakban az install.packages() parancsot futtatva, ahol a ()-be a telepíteni kívánt csomag nevét kell beírnunk (pl.: install.packages(dplyr)). Figure 13.4: Packages fül 13.1.5 Objektumok tárolása, értékadás Az objektumok lehetnek például vektorok, mátrixok (matrix), tömbök (array), adat táblák (data frame). Értékadás nélkül az R csak megjeleníti a mveletek eredményét, de nem tárolja el azokat. Az eredmények eltárolásához azokat egy objektumba kell elmentenünk. Ehhez meg kell adnunk az objektum nevét majd az &lt;- után adjuk meg annak értékét: a &lt;- 12 + 3.Futtatás után az environments fülön megjelenik az a objektum, melynek értéke 15. Az objektumok elnevezésénél figyelnünk kell arra, hogy az R különbséget tesz a kis és nagybetk között, valamint, hogy az ugyanolyan nev objektumokat kérdés nélkül felülírja és ezt a felülírást nem lehet visszavonni. 13.1.6 Vektorok Az R-ben kétféle típusú vektort különböztetünk meg: egyedüli vektor (atomic vector) lista (list) Az egyedüli vektornak hat típusa van, logikai (logical), egész szám (integer), természetes szám (double), karakter (character), komplex szám (complex) és nyers adat (raw). A leggyakrabban valamilyen numerikus, logikai vagy karakter vektorral használjuk. Az egyedüli vektorok onnan kapták a nevüket hogy csak egy féle adattípust tudnak tárolni. A listák ezzel szemben gyakorlatilag bármit tudnak tárolni, akár több listát is egybeágyazhatunk. A vektorok és listák azok az építelemek amikbl felépülnek az R objektumaink. Több érték vagy azonos típusú objektum összefzését a c() függvénnyel végezhetjük el. A lenti példában három különböz objektumot kreálunk, egy numerikusat, egy karaktert és egy logikait. A karakter vektorban az elemeket idzjellel és vesszvel szeparáljuk. A logikai vektor csak TRUE, illetve FALSE értékeket tartalmazhat. numerikus &lt;- c(1,2,3,4,5) karakter &lt;- c(&quot;kutya&quot;,&quot;macska&quot;,&quot;ló&quot;) logikai &lt;- c(TRUE, TRUE, FALSE) A létrehozott vektorokkal különböz mveleteket végezhetünk el, például összeadhatjuk numerikus vektorainkat. Ebben az esetben az els vektor els eleme a második vektor els eleméhez adódik. c(1:4) + c(10,20,30,40) #&gt; [1] 11 22 33 44 A karaktervektorokat összefzhetjük egymással. Itt egy új objektumot is létrehoztunk, a jobb fels ablakban, az environment fülön láthatjuk, hogy a létrejött karakter_kombinalt objektum egy négy elem (hosszúságú) karaktervektor (chr [1:4]), melynek elemei a \"kutya\",\"macska\",\"ló\",\"nyúl\". Az objektumként tárolt vektorok tartalmát a lefuttatva írathatjuk ki a console ablakba. Habár van print() függvény az R-ben, azt ilyenkor nem szükséges használni. karakter1 &lt;- c(&quot;kutya&quot;,&quot;macska&quot;,&quot;ló&quot;) karakter2 &lt;-c(&quot;nyúl&quot;) karakter_kombinalt &lt;-c(karakter1, karakter2) karakter_kombinalt #&gt; [1] &quot;kutya&quot; &quot;macska&quot; &quot;ló&quot; &quot;nyúl&quot; Ha egy vektorról szeretnénk megtudni, hogy milyen típusú azt a typeof() vagy a class() paranccsal tehetjük meg, ahol ()-ben az adott objektumként tárolt vektor nevét kell megadnunk: typeof(karakter1). A vektor hosszúságát (benne tárolt elemek száma vektorok esetén) a lenght() függvénnyel tudhatjuk meg. typeof(karakter1) #&gt; [1] &quot;character&quot; length(karakter1) #&gt; [1] 3 13.1.7 Faktorok A faktorok a kategórikus adatok tárolására szolgálnak. Faktor típusú változó a factor() függvénnyel hozható létre. A faktor szintjeit (igen, semleges, nem), a levels() függvénnyel kaphatjuk meg míg az adatok címkéit (tehát a kapott válaszok száma), a labels() paranccsal érhetjük el. survey_response &lt;- factor(c(&quot;igen&quot;, &quot;semleges&quot;, &quot;nem&quot;, &quot;semleges&quot;, &quot;nem&quot;, &quot;nem&quot;, &quot;igen&quot;), ordered = TRUE) levels(survey_response) #&gt; [1] &quot;igen&quot; &quot;nem&quot; &quot;semleges&quot; labels(survey_response) #&gt; [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; 13.1.8 Data frame Az adat táblák (data frame) a statisztikai és adatelemzési folyamatok egyik leggyakrabban használt adattárolási formája. Amikor lehetséges akkor a hosszú formátumban használjuk (az R közösség a tidy jelzvel illeti), aholtéglalap alakú adatszerkezetek, ahol minden sor egy megfigyelés és minden oszlop egy változó [TIDY CITATION]. Egy data frame többféle típusú adatot tartalmazhat. A data frame-k különféle oszlopokból állhatnak, amelyek különféle típusú adatokat tartalmazhatnak, de egy oszlop csak egy típusú adatból állhat. A lent bemutatott data frame 7 megfigyelést és 4 féle változót tartalmaz (id, country, pop, continent). #&gt; id orszag nepesseg kontinens #&gt; 1 1 Thailand 68.7 Asia #&gt; 2 2 Norway 5.2 Europe #&gt; 3 3 North Korea 24.0 Asia #&gt; 4 4 Canada 47.8 North America #&gt; 5 5 Slovenia 2.0 Europe #&gt; 6 6 France 63.6 Europe #&gt; 7 7 Venezuela 31.6 South America A data frame-be rendezett adatokhoz különböz módon férhetünk hozzá, például a data frame nevének majd []-ben a kívánt sor megadásával, kiírathatjuk a console ablakba annak tetszleges sorát ás oszlopát: orszag_adatok[1, 1]. Az R több különböz módot kínál a data frame sorainak és oszlopainak eléréséhez. A [ általános használata: data_frame[sor, oszlop]. Egy másik megoldás a $ haszálata: data_frame$oszlop. orszag_adatok[1, 4] #&gt; [1] Asia #&gt; Levels: Asia Europe North America South America orszag_adatok$orszag #&gt; [1] &quot;Thailand&quot; &quot;Norway&quot; &quot;North Korea&quot; &quot;Canada&quot; &quot;Slovenia&quot; #&gt; [6] &quot;France&quot; &quot;Venezuela&quot; 13.2 Vizualizáció library(ggplot2) library(gapminder) Az elemzéseinkhez használt data frame adatainak alapján a ggplot2 csomag segítségével lehetségünk van különböz vizualizációk készítésére is. A ggplot2 használata során különböz témákat alkalmazhatunk, melyek részletes leírása megtalálható: https://ggplot2.tidyverse.org/reference/ggtheme.html Abban az esetben, ha nem választunk témát, a ggplot2 a következ ábrán is látható alaptémát használja. Ha például a szürke helyett fehér hátteret szeretnénk, alkalmazhatjuk a theme_minmal()parancsot. Szintén gyakran alkalmazott ábra alap a thema_bw(), ami az elztl az ábra keretezésében különbözik. Ha fehér alapon, de a beosztások vonalait feketén szeretnénk megjeleníteni, alkalmazhatjuk a theme_linedraw() függvényt, a theme_void() segítségével pedig egy fehér alapon, beosztásoktól mentes alapot kapunk, a theme_dark() pedig sötét hátteret eredményez. A theme_classic() segítségével az x és y tengelyt jeleníthetjük meg fehér alapon. Egy ábra készítésének alapja mindig a használni kívánt adatkészlet beolvasása, illetve az ábrázolni kívánt változót vagy változók megadása. Ezt követi a megfelel alakzat kiválasztása, attól függen például, hogy eloszlást, változást, adatok közötti kapcsolatot, vagy eltéréseket akarunk ábrázolni. A geom az a geometriai objektum, a mit a diagram az adatok megjelenítésére használ. Agglpot2 több mint 40 féle alakzat alkalmazására ad lehetséget, ezek közül néhány gyakoribbat mutatunk be az alábbiakban. Az alakzatokról részletes leírása található például az alábbi linken: https://r4ds.had.co.nz/data-visualisation.html A következkben a már korábban is használt gapminder adatok segítségével, szemléltetjük az adatok vizualizálásának alapjait. Elször egyszer alapbeállítások mellett egy histogram típusú vizualizációt készítünk. ggplot( data = gapminder, mapping = aes(x = gdpPercap) ) + geom_histogram() Lehetségünk van arra, hogy az alakzat színét megváltoztassuk. A használható színek és színkódok megtalálhatóak a ggplot2 leírásában: https://ggplot2-book.org/scale-colour.html ggplot( data = gapminder, mapping = aes(x = gdpPercap) ) + geom_histogram(fill = &quot;yellow&quot;, colour = &quot;green&quot;) Meghatározhatjuk külön-külön a histogram x és y tengelyén ábrázolni kívánt adatokat és választhatjuk azok pontszer ábrázolását is. ggplot( data = gapminder, mapping = aes( x = gdpPercap, y = lifeExp ) ) + geom_point() Ahogy az elzekben, itt is megváltoztathatjuk az ábra színét. ggplot( data = gapminder, mapping = aes( x = gdpPercap, y = lifeExp ) ) + geom_point(colour = &quot;blue&quot;) Az fenti script kibvítésével az egyes kontinensek adatait különböz színnel ábrázolhatjuk, az x és y tengelyt elnevezhetjük, a histogramnak címet és alcímet adhatunk, illetve az adataink forrását is feltüntethetjük az alábbi módon: ggplot( data = gapminder, mapping = aes( x = gdpPercap, y = lifeExp, color = continent ) ) + geom_point() + labs( x = &quot;GDP per capita (log $)&quot;, y = &quot;Life expectancy&quot;, title = &quot;Connection between GDP and Life expectancy&quot;, subtitle = &quot;Points are country-years&quot;, caption = &quot;Source: Gapminder dataset&quot; ) Az ábrán található feliratok méretének, bettípusának és betszínének megválasztásra is lehetségünk van. ggplot( data = gapminder, mapping = aes( x = gdpPercap, y = lifeExp, color = continent ) ) + geom_point() + labs( x = &quot;GDP per capita (log $)&quot;, y = &quot;Life expectancy&quot;, title = &quot;Connection between GDP and Life expectancy&quot;, subtitle = &quot;Points are country-years&quot;, caption = &quot;Source: Gapminder dataset&quot; ) + theme(plot.title = element_text( size = 12, colour = &quot;red&quot; )) Készíthetünk oszlopdiagramot is, amit a ggplot2 diamonds adatkészletén személtetünk ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) Itt is lehetségünk van arra, hogy a diagram színét megváltoztassuk. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut), fill = &quot;darkgreen&quot;) De arra is lehetségünk van, hogy az egyes oszlopok eltér színek legyenek. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut)) Arra is van lehetségünk, hogy egyszerre több változót is ábrázoljunk. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) Arra ggplot2 segítségével arra is lehetségünk van, hogy csv-bl beolvasott adatainkat vizualizáljuk. plot_cap_1 &lt;- read.csv(&quot;data/plot_cap_1.csv&quot;, head = TRUE, sep = &quot;;&quot;) ggplot(plot_cap_1, aes(Year, fill = Subtopic)) + scale_x_discrete(limits = c(1957, 1958, 1959, 1960, 1961, 1962, 1963)) + geom_bar(position = &quot;dodge&quot;) + labs( x = NULL, y = NULL, title = &quot;A Magyar Közlönyben kihirdetett agrárpolitikai jogszabályok&quot;, subtitle = &quot;N=445&quot; ) + coord_flip() + # az ábra tipusa theme_minimal() + theme(plot.title = element_text(size = 12)) A csv-bl belolvasott adatainkból kördiagramot is készíthetünk pie &lt;- read.csv(&quot;data/pie.csv&quot;, head = TRUE, sep = &quot;;&quot;) ggplot(pie, aes(x = &quot;&quot;, y = value, fill = Type)) + geom_bar(stat = &quot;identity&quot;, width = 1) + coord_polar(&quot;y&quot;, start = 0) + scale_fill_brewer(palette = &quot;GnBu&quot;) + labs( title = &quot;A Magyar Közlönyben megjelent jogszabályok típusai&quot;, subtitle = &quot;N = 445&quot; ) + theme_void() Arun, Rajkumar, Venkatasubramaniyan Suresh, CE Veni Madhavan, and MN Narasimha Murthy. 2010. On Finding the Natural Number of Topics with Latent Dirichlet Allocation: Some Observations. In Pacific-Asia Conference on Knowledge Discovery and Data Mining, 391402. Springer. Blei, David M, Andrew Y Ng, and Michael I Jordan. 2003. Latent Dirichlet Allocation. Journal of Machine Learning Research 3 (Jan): 9931022. Burtejin, Zorgit. 2016. Csoportosítás (Klaszterezés). In Kvantitatív Szövegelemzés és Szövegbányászat a Politikatudományban, edited by Miklós Sebk, 85101. Budapest: LHarmattan. Cao, Juan, Tian Xia, Jintao Li, Yongdong Zhang, and Sheng Tang. 2009. A Density-Based Method for Adaptive LDA Model Selection. Neurocomputing 72 (7-9): 177581. Deveaud, Romain, Eric SanJuan, and Patrice Bellot. 2014. Accurate and Effective Latent Concept Modeling for Ad Hoc Information Retrieval. Document Numérique 17 (1): 6184. Griffiths, T. L., and M. Steyvers. 2004. Finding Scientific Topics. Proceedings of the National Academy of Sciences 101 (Supplement 1): 522835. https://doi.org/10.1073/pnas.0307752101. Grimmer, Justin, and Brandon M Stewart. 2013. Text as Data: The Promise and Pitfalls of Automatic Content Analysis Methods for Political Texts. Political Analysis 21 (3): 26797. Hjorth, Frederik, Robert Klemmensen, Sara Hobolt, Martin Ejnar Hansen, and Peter Kurrild-Klitgaard. 2015. Computers, Coders, and Voters: Comparing Automated Methods for Estimating Party Positions. Research &amp; Politics 2 (2): 2053168015580476. Jacobi, Carina, Wouter Van Atteveldt, and Kasper Welbers. 2016. Quantitative Analysis of Large Amounts of Journalistic Texts Using Topic Modelling. Digital Journalism 4 (1): 89106. Kwartler, Ted. 2017. Text Mining in Practice with R. John Wiley &amp; Sons. Laver, Michael, Kenneth Benoit, and John Garry. 2003. Extracting Policy Positions from Political Texts Using Words as Data. American Political Science Review, 31131. Laver, Michael, and John Garry. 2000. Estimating Policy Positions from Political Texts. American Journal of Political Science, 61934. Loughran, Tim, and Bill McDonald. 2011. When Is a Liability Not a Liability? Textual Analysis, Dictionaries, and 10-Ks. The Journal of Finance 66 (1): 3565. Máté, Ákos, Miklós Sebk, and Tamás Barczikay. 2021. The Effect of Central Bank Communication on Sovereign Bond Yields: The Case of Hungary. Edited by Hiranya K. Nath. PLOS ONE 16 (2): e0245515. https://doi.org/10.1371/journal.pone.0245515. Mikolov, Tomas, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Efficient Estimation of Word Representations in Vector Space. arXiv Preprint arXiv:1301.3781. http://arxiv.org/abs/1301.3781. Mikolov, Tomas, Edouard Grave, Piotr Bojanowski, Christian Puhrsch, and Armand Joulin. 2018. Advances in Pre-Training Distributed Word Representations. In Proceedings of the International Conference on Language Resources and Evaluation (LREC 2018). Pennington, Jeffrey, Richard Socher, and Christopher D Manning. 2014. Glove: Global Vectors for Word Representation. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), 153243. Phan, Xuan-Hieu, Le-Minh Nguyen, and Susumu Horiguchi. 2008. Learning to Classify Short and Sparse Text &amp; Web with Hidden Topics from Large-Scale Data Collections. In Proceedings of the 17th International Conference on World Wide Web, 91100. Roberts, Margaret E, Brandon M Stewart, Dustin Tingley, Christopher Lucas, Jetson Leder-Luis, Shana Kushner Gadarian, Bethany Albertson, and David G Rand. 2014. Structural Topic Models for Open-Ended Survey Responses. American Journal of Political Science 58 (4): 106482. Russel, Stuart, and Peter Norvig. 2005. Mesterséges Intelligencia. Panem Kft. Schütze, Hinrich, Christopher D Manning, and Prabhakar Raghavan. 2008. Introduction to Information Retrieval. Vol. 39. Cambridge University Press Cambridge. Silge, Julia, and David Robinson. 2017. Text Mining with R: A Tidy Approach. \" OReilly Media, Inc.\". Slapin, Jonathan B, and Sven-Oliver Proksch. 2008. A Scaling Model for Estimating Time-Series Party Positions from Texts. American Journal of Political Science 52 (3): 70522. Spirling, Arthur, and Pedro L Rodriguez. Forthcoming. Word Embeddings. Journal of Politics, Forthcoming. Tan, Pang-Ning, Michael Steinbach, and Vipin Kumar. 2011. Bevezetés Az Adatbányászatba. Panem Kft. Tikk, Domonkos. 2007. Szövegbányászat. Budapest: Typotext. Welbers, Kasper, Wouter Van Atteveldt, and Kenneth Benoit. 2017. Text Analysis in R. Communication Methods and Measures 11 (4): 24565. Wickham, Hadley, and Garrett Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. \" OReilly Media, Inc.\". Young, Lori, and Stuart Soroka. 2012. Affective News: The Automated Coding of Sentiment in Political Texts. Political Communication 29 (2): 20531. "]]
